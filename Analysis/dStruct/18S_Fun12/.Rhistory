,col=heat.colors(256)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
heatmap(B
,scale = 'column'
,col=heat.colors(256)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
?heatmap
heatmap(B
,scale = 'none'
,col=heat.colors(256)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
?heatmap
?heatmap
heatmap(as.matrix(labels)
,scale = 'column'
,col=heat.colors(10)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
heatmap(as.matrix(labels)
,scale = 'column'
,col=heat.colors(256)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
B = matrix(c(1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,0, 0, 0, 1),ncol=4, byrow = TRUE)
heatmap(B
,scale = 'none'
,col=heat.colors(10)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
B = matrix(c(1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,0, 0, 0, 1),ncol=4, byrow = TRUE)
heatmap(B
,scale = 'none'
,col=heat.colors(4)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
B = matrix(c(1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,0, 0, 0, 1),ncol=4, byrow = TRUE)
heatmap(B
,scale = 'none'
,col=heat.colors(20)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
B = matrix(c(1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,1, 0, 0, 0,0, 0, 0, 1),ncol=4, byrow = TRUE)
heatmap(B
,scale = 'none'
,col=heat.colors(10)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
labels
source('C:/Users/maran/Desktop/paolo-bumhmm/code_v17052018/code_v17052018/synth_bummhmm_diff.R')
labels
B = matrix(c(1, 0, 0, 0,1, 0, 0, 0,0, 0, 1, 0,0, 0, 1, 0,0, 0, 1, 0,0, 1, 0, 0),ncol=4, byrow = TRUE)
heatmap(B
,scale = 'none'
,col=heat.colors(10)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
B = matrix(c(1, 0, 0, 0,1, 0, 0, 0,0, 0, 1, 0,0, 0, 1, 0,0, 0, 1, 0,0, 1, 0, 0),ncol=4, byrow = TRUE)
heatmap(B
,scale = 'none'
,col=heat.colors(10)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
B = matrix(c(1, 0, 0, 0,1, 0, 0, 0,0, 0, 1, 0,0, 0, 1, 0,0, 0, 1, 0,0, 1, 0, 0, 0, 0, 1, 0,),ncol=4, byrow = TRUE)
heatmap(B
,scale = 'none'
,col=heat.colors(10)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
B = matrix(c(1, 0, 0, 0,1, 0, 0, 0,0, 0, 1, 0,0, 0, 1, 0,0, 0, 1, 0,0, 1, 0, 0, 0, 0, 1, 0,),ncol=4, byrow = TRUE)
B = matrix(c(1, 0, 0, 0,1, 0, 0, 0,0, 0, 1, 0,0, 0, 1, 0,0, 0, 1, 0,0, 1, 0, 0, 0, 0, 1, 0),ncol=4, byrow = TRUE)
heatmap(B
,scale = 'none'
,col=heat.colors(10)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
B = matrix(c(1, 0, 0, 0,1, 0, 0, 0,0, 0, 1, 0,0, 0, 1, 0,0, 0, 1, 0,0, 0, 1, 0, 0, 1, 0, 0),ncol=4, byrow = TRUE)
heatmap(B
,scale = 'none'
,col=heat.colors(10)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
print(t(posterior))
A=t(posterior)
heatmap(A,
,scale = 'none'
,col=heat.colors(10)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
heatmap(A[1:7,],
,scale = 'none'
,col=heat.colors(10)
,main="Modelled Data"
,Rowv=NA
,Colv=NA)
source('C:/Users/maran/Desktop/paolo-bumhmm/code_v17052018/code_v17052018/synth_bummhmm_diff.R')
posterior[1:5,]
posterior[1:4,]
posterior[1:4,1:4]
heatmap(posterior[1:4,1:10]
,scale = 'column'
,col=heat.colors(256)
,main='Treatment_Coverage'
,Rowv=NA
,Colv=NA)
heatmap(posterior[1:4,1:10]
,scale = 'column'
,col=heat.colors(10)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
posterior[1:4,1:10]
posterior[1:10,1:4]
t(posterior)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(10)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(256)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior[1:10,]
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(20)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(15)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
heatmap(posterior[1:4,1:10]
,scale = 'column'
,col=heat.colors(256)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
posterior[1:4,1:10]
heatmap(posterior[1:4,1:10]
,scale = 'none'
,col=heat.colors(256)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
heatmap(posterior[1:4,1:10]
,scale = 'column'
,col=heat.colors(256)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(15)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(10)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'none'
,col=heat.colors(10)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
?heatmap
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'row'
,col=heat.colors(10)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
View(transpose_posterior)
trans <- matrix(c(0.95, 0.2, 0.05, 0.8), nrow=2, ncol=2)
t(trans)
getwd()
print(correct_prop)
print(correct_prop)
#_________________SYNTHETIC CODE GENERATION________________________________________
library(BUMHMM)
### Generate synthetic data
alpha = 1
beta = 10
E = 2 # Number of experimental comparisons
trans <- matrix(c(0.95, 0.2, 0.05, 0.8), nrow = 2, ncol = 2)
trans <- t(trans)
curr_state = 1
N = 10000
Pvals = matrix(0, nrow = E, ncol = N)
all_states = c()
for (i in 1:N) {
if (curr_state ==1){curr_state = rbinom(1, 1, trans[, curr_state]) + 1}
else if (curr_state == 2){if (rbinom(1, 1, trans[, curr_state]) == 0) {curr_state = 2} else {curr_state =1}}
all_states[i] = curr_state
for (e in 1:E) {
if (curr_state == 1) {
Pvals[e,i] = runif(1)
} else if (curr_state == 2) {
Pvals[e,i] = rbeta(1, alpha, beta)
}
}
}
# Obtain generated p-values and latent states
p <- t(Pvals)
### Run BUMHMM on the generated p-valus
out <- BUMHMM:::hmmFwbw(Pvals, trans, c(0.5, 0.5), alpha, beta)
out <- t(out)
# Check if the predicted states match the latent (true) states
labels <- apply(X = out, MARGIN = 1, FUN = function(x) which(x == max(x, na.rm = TRUE)))
correct_prop <- length(which(all_states == labels)) / N
print(correct_prop)
ls
x= c(1,2,3)
x
class(x)
x = c(0,1,2,3,4,5,6,7,8,9)
0:100
x1= 0:100
y = 3+2*x1
plot(x1, y)
seq{0,10, by=0.5}
seq(0,10, by=0.5)
seq(0,10, length=31)
legend(’topright’, lty=c(3,2), col=c(’red’, ’blue’), lwd=2,
legend=c(’pop mean’, ’sample mean’), cex=0.8) #adds the legend
legend(’topright’, lty=c(3,2), col=c(’red’, ’blue’), lwd=2,
legend=c(’pop mean’, ’sample mean’), cex=0.8) #adds the legend
### Draws and plots a sample from the standard normal distribution
n = 50 # sample size
x = rnorm(n, 0, 1) #draws the sample
x.bar = mean(x) #sample mean
br = seq(min(x), max(x), length=13) #sets breaks for the histogram
hist(x, col=’wheat’, breaks=br) # makes the histogram
abline(v=0, lty=3, col=’red’, lwd=2) # adds population line
abline(v=x.bar, lty=2, col=’blue’, lwd=2) # adds sample line
legend(’topright’, lty=c(3,2), col=c(’red’, ’blue’), lwd=2,legend=c(’pop mean’, ’sample mean’), cex=0.8) #adds the legend
### Draws and plots a sample from the standard normal distribution
n = 50 # sample size
x = rnorm(n, 0, 1) #draws the sample
x.bar = mean(x) #sample mean
br = seq(min(x), max(x), length=13) #sets breaks for the histogram
hist(x, col=’wheat’, breaks=br) # makes the histogram
abline(v=0, lty=3, col=’red’, lwd=2) # adds population line
abline(v=x.bar, lty=2, col=’blue’, lwd=2) # adds sample line
legend(’topright’, lty=c(3,2), col=c(’red’, ’blue’), lwd=2, legend=c(’pop mean’, ’sample mean’), cex=0.8) #adds the l
qnorm(97.5)
qnorm(0.975)
library(parallel)
detectCores()
(cl=makeCluster(detectCores()))
library(parallel)
detectCores()
(cl=makeCluster(detectCores()))
library(parallel)
detectCores()
(cl=makeCluster(detectCores()))
(parLapply( cl, coreList, function(x) paste("pid "Sys.getpid(), " run on core", x)))
( parLapply( cl, coreList, function(x) paste("pid "sys.getpid(), " run on core", x)))
proc.time()[1:5]
system.time(Sys.sleep(1))
system.time(Sys.sleep(1))[1:5]
trans <- matrix(c(0.8, 0.1, 0.1, 0.1,
0.05, 0.6, 0.15, 0.05,
0.05, 0.15, 0.6, 0.05,
0.1, 0.15, 0.15, 0.8), nrow = 4, ncol = 4, byrow = TRUE)
trans
####Maximisation of log-likelihood for Poisson ditribution
set.seed(600) # set a random seed for reproducibility of results
data <- rpois(n=150,20)
poisson_loglikelihood <- function(lambda,x)
{
n <-length(x) # n is the sample size
llik <- -n*lambda+sum(x*log(lambda))-sum(log(factorial(x)))
return(llik)
}
maximisation <- optimize(poisson_loglikelihood,
interval=c(1,50),x=data,maximum=TRUE)
maximisation
####Maximisation of log-likelihood for Poisson ditribution
set.seed(600) # set a random seed for reproducibility of results
data <- rpois(n=150,20)
poisson_loglikelihood <- function(lambda,x)
{
n <-length(x) # n is the sample size
llik <- -n*lambda+sum(x*log(lambda))-sum(log(factorial(x)))
return(llik)
}
maximisation <- optimize(poisson_loglikelihood,
interval=c(1,50),x=data,maximum=TRUE)
>maximisation
####Maximisation of log-likelihood for Poisson ditribution
set.seed(600) # set a random seed for reproducibility of results
data <- rpois(n=150,20)
poisson_loglikelihood <- function(lambda,x)
{
n <-length(x) # n is the sample size
llik <- -n*lambda+sum(x*log(lambda))-sum(log(factorial(x)))
return(llik)
}
maximisation <- optimize(poisson_loglikelihood,
interval=c(1,50),x=data,maximum=TRUE)
maximisation
#The following code draws 5000 samples of size 150 from a Poisson(20) and each time time stores the MLE to the vector mle.
set.seed(400) # set a random seed for reproducibility of results
mle <- NULL
for (i in 1:5000){
x <- rpois(n=150,20) # draw a sample of size 150 from Poisson(l=20)
mle[i] <- mean(x) # This only works because the MLE for a poisson is the mean. MLE might not be equivalent to the mean for different for other distributions
}
m <- mean(mle)
v <- var(mle)
c(m,v)
hist(mle,xlab=expression(hat(lambda)),freq=FALSE)
abline(v=m,col=2, lty=2,lwd=2)
# Add the line of a normal curve with mean=20, sigma=0.134
z <- seq(18,22,length=1000)
lines(z,dnorm(z, 20, sqrt(0.134)),col=4)
c(quantile(mle,0.025), quantile(mle,0.975))
abline(v=quantile(mle,0.975),col=2,lty=2,lwd=2)
abline(v=quantile(mle,0.025),col=2,lty=2,lwd=2)
nrows = 320
ncols = 11000
set.seed(1)
in_data = rnorm(nrows*ncols)
nCores = detectCores()
library(parallel)
nCores = detectCores()
?cor
git branch
ls
ls
ls
source("https://bioconductor.org/biocLite.R")
devtools::install_github("renanxcortes/springerQuarantineBooksR")
version
script.dir <- dirname(sys.frame(1)$ofile)
print(script.dir)
getwd()
setwd("C:/Users/maran/Desktop/DIFFBUMHMMJULY2020/diff_BUM_HMM/Scripts")
getwd()
source("diffBUM_HMM_35S_dataset.R")
install.packages("rstudioapi")
source("diffBUM_HMM_35S_dataset.R")
source("diffBUM_HMM_35S_dataset.R")
install.packages("rstudioapi")
install.packages(thisfile)
install.packages("thisfile")
source("diffBUM_HMM_35S_dataset.R")
library(funr)
install.packages("funr")
source("diffBUM_HMM_35S_dataset.R")
source("diffBUM_HMM_35S_dataset.R")
install.packages("here")
source("diffBUM_HMM_35S_dataset.R")
install.packages("here")
source("diffBUM_HMM_35S_dataset.R")
source("diffBUM_HMM_35S_dataset.R")
source("diffBUM_HMM_35S_dataset.R")
source("diffBUM_HMM_35S_dataset.R")
source("diffBUM_HMM_35S_dataset.R")
source("diffBUM_HMM_35S_dataset.R")
source("diffBUM_HMM_35S_dataset.R")
install.packages("scriptName")
source("diffBUM_HMM_35S_dataset.R")
source("diffBUM_HMM_35S_dataset.R")
source("diffBUM_HMM_35S_dataset.R")
install.packages("thisfile")
source("diffBUM_HMM_35S_dataset.R")
source("diffBUM_HMM_35S_dataset.R")
source("diffBUM_HMM_35S_dataset.R")
source("diffBUM_HMM_35S_dataset.R")
source("diffBUM_HMM_35S_dataset.R")
source("diffBUM_HMM_35S_dataset.R")
setwd("C:/Users/maran/Desktop/DIFFBUMHMMJULY2020/new_clone/diff_BUM_HMM/Scripts")
install.packages("rstudioapi")
install.packages("gtools")
library(gtools)
install.packages("devtools")
install.packages("ggplot2")
install.packages("reshape2")
r1 <- read.table("Fun12_EtOH_160113_1_18S_18S_chemmod_out.txt", col.names=c("gene","position","nucleotide","readsmapped","dropoffs","hybs"))
wd <- setwd(".")
setwd(wd)
setwd('..')
getwd()
#### ------- LOADING DATA ------ ######
setwd("Reference_sequences")
setwd('../Data/Control_rRNA_dataset')
r1 <- read.table("Fun12_EtOH_160113_1_18S_18S_chemmod_out.txt", col.names=c("gene","position","nucleotide","readsmapped","dropoffs","hybs"))
r2 <- read.table("Fun12_EtOH_160113_2_18S_18S_chemmod_out.txt",  col.names=c("gene","position","nucleotide","readsmapped","dropoffs","hybs"))
r3 <- read.table("Fun12_EtOH_190712_18S_18S_chemmod_out.txt",  col.names=c("gene","position","nucleotide","readsmapped","dropoffs","hybs"))
r4 <- read.table("Fun12_DMS_160113_1_18S_18S_chemmod_out.txt", col.names=c("gene","position","nucleotide","readsmapped","dropoffs","hybs"))
r5 <- read.table("Fun12_DMS_160113_2_18S_18S_chemmod_out.txt",  col.names=c("gene","position","nucleotide","readsmapped","dropoffs","hybs"))
r6 <- read.table("Fun12_DMS_190712_18S_18S_chemmod_out.txt",  col.names=c("gene","position","nucleotide","readsmapped","dropoffs","hybs"))
mergedcountswt18Snew <- subset(r1, select = -c(nucleotide,dropoffs,hybs, readsmapped ) )
mergedcountswt18Snew$position <- as.integer(as.character(mergedcountswt18Snew$position))
mergedcountswt18Snew$ETOH1 <- as.integer(as.character(r1$readsmapped))
mergedcountswt18Snew$ET0H2 <- as.integer(as.character(r2$readsmapped))
mergedcountswt18Snew$ETOH3 <- as.integer(as.character(r3$readsmapped))
mergedcountswt18Snew$DMS1 <- as.integer(as.character(r4$readsmapped))
mergedcountswt18Snew$DMS2 <- as.integer(as.character(r5$readsmapped))
mergedcountswt18Snew$DMS3 <- as.integer(as.character(r6$readsmapped))
mergedcountswt18Snew <- mergedcountswt18Snew[-1,]
mergedcountswt18Snew[nrow(mergedcountswt18Snew)+1,] <- 0
row.names(mergedcountswt18Snew) <- NULL
mergedcountswt18Snew[1800,"gene"] = "18S"
mergedcountswt18Snew[1800,"position"] = 1800
#mergedstartswt18Snew
mergedstartswt18Snew <-  subset(r1, select = -c(nucleotide,dropoffs,hybs, readsmapped ) )
mergedstartswt18Snew$position <- as.integer(as.character(mergedstartswt18Snew$position))
mergedstartswt18Snew$ETOH1 <- as.integer(as.character(r1$dropoffs))
mergedstartswt18Snew$ET0H2 <- as.integer(as.character(r2$dropoffs))
mergedstartswt18Snew$ETOH3 <- as.integer(as.character(r3$dropoffs))
mergedstartswt18Snew$DMS1 <- as.integer(as.character(r4$dropoffs))
mergedstartswt18Snew$DMS2 <- as.integer(as.character(r5$dropoffs))
mergedstartswt18Snew$DMS3 <- as.integer(as.character(r6$dropoffs))
mergedstartswt18Snew <- mergedstartswt18Snew[-1,]
mergedstartswt18Snew[nrow(mergedstartswt18Snew)+1,] <- 0
row.names(mergedstartswt18Snew) <- NULL
mergedstartswt18Snew[1800,"gene"] = "18S"
mergedstartswt18Snew[1800,"position"] = 1800
write.table(mergedcountswt18Snew,sep="\t",quote=FALSE,file="mature_rRNA_18SFun12_counts_EtOH1_allreps.txt",col.names = c("gene","position", "ETOH1", "ET0H2", "DMS1","DMS2"), row.names = TRUE)
write.table(mergedstartswt18Snew,sep="\t",quote=FALSE,file="mature_rRNA_18SFun12_starts_EtOH1_allreps.txt",col.names = c("gene","position", "ETOH1", "ET0H2", "DMS1","DMS2"), row.names = TRUE)
write.table(mergedcountswt18Snew,sep="\t",quote=FALSE,file="mature_rRNA_18SFun12_counts_EtOH2_allreps.txt",col.names = c("gene","position", "ETOH1", "ET0H2", "DMS1","DMS2"), row.names = TRUE)
write.table(mergedstartswt18Snew,sep="\t",quote=FALSE,file="mature_rRNA_18SFun12_starts_EtOH2_allreps.txt",col.names = c("gene","position", "ETOH1", "ET0H2",  "DMS1","DMS2"), row.names = TRUE)
write.table(mergedcountswt18Snew,sep="\t",quote=FALSE,file="mature_rRNA_18SFun12_counts_EtOH1_allreps.txt",col.names = c("gene","position", "ETOH1", "ET0H2","ET0H3", "DMS1","DMS2", "DMS3"), row.names = TRUE)
write.table(mergedstartswt18Snew,sep="\t",quote=FALSE,file="mature_rRNA_18SFun12_starts_EtOH1_allreps.txt",col.names = c("gene","position", "ETOH1", "ET0H2","ET0H3", "DMS1","DMS2", "DMS3"), row.names = TRUE)
write.table(mergedcountswt18Snew,sep="\t",quote=FALSE,file="mature_rRNA_18SFun12_counts_EtOH2_allreps.txt",col.names = c("gene","position", "ETOH1", "ET0H2","ET0H3", "DMS1","DMS2", "DMS3"), row.names = TRUE)
write.table(mergedstartswt18Snew,sep="\t",quote=FALSE,file="mature_rRNA_18SFun12_starts_EtOH2_allreps.txt",col.names = c("gene","position", "ETOH1", "ET0H2","ET0H3", "DMS1","DMS2", "DMS3"), row.names = TRUE)
a_cnts <- read.table("mature_rRNA_18SFun12_starts_EtOH1_allreps.txt",
sep = "\t", header= T)
a_cov <- read.table("mature_rRNA_18SFun12_counts_EtOH1_allreps.txt",
sep = "\t", header= T)
b_cnts <- read.table("mature_rRNA_18SFun12_starts_EtOH2_allreps.txt",
sep = "\t", header= T)
b_cov <- read.table("mature_rRNA_18SFun12_counts_EtOH2_allreps.txt",
sep = "\t", header= T)
View(a_cnts)
View(a_cov)
a_rates <- a_cnts[, 3:7]/a_cov[, 3:7]
b_rates <- b_cnts[, 3:7]/b_cov[, 3:7]
View(a_rates)
a_rates <- a_cnts[, 3:8]/a_cov[, 3:8]
b_rates <- b_cnts[, 3:8]/b_cov[, 3:8]
View(a_rates)
View(a_rates)
a_rates <- a_cnts[, 3:8]/a_cov[, 3:8]
b_rates <- b_cnts[, 3:8]/b_cov[, 3:8]
View(a_rates)
a_raw_reac <- (a_rates[, 4:6] - a_rates[, 1:3])/(1 - a_rates[, 1:3])
b_raw_reac <- (b_rates[, 4:6] - b_rates[, 1:3])/(1 - b_rates[, 1:3])
View(a_raw_reac)
View(b_raw_reac)
a_raw_reac_rates_2_8_norm <- apply(a_raw_reac , 2, two.eight.normalize)
b_raw_reac_rates_2_8_norm <- apply(b_raw_reac, 2, two.eight.normalize)
library(devtools)
library(dStruct)
library(ggplot2)
library(reshape2)
library(formattable)
a_raw_reac_rates_2_8_norm <- apply(a_raw_reac , 2, two.eight.normalize)
b_raw_reac_rates_2_8_norm <- apply(b_raw_reac, 2, two.eight.normalize)
View(a_raw_reac_rates_2_8_norm)
reac <- cbind(a_raw_reac_rates_2_8_norm , b_raw_reac_rates_2_8_norm)
View(reac)
colnames(reac) <- c("A1", "A2", "B1", "B2")
colnames(reac) <- c("A1", "A2","A3" "B1", "B2", "B3")
colnames(reac) <- c("A1", "A2","A3", "B1", "B2", "B3")
View(reac)
reac[reac<0] <- 0
reac <- as.data.frame(reac)
setwd('..')
setwd('..')
setwd("Analysis/dStruct/18S_Fun12")
result <- dStruct(reac, reps_A = 3, reps_B = 3, min_length = 5) #Change the search length here
