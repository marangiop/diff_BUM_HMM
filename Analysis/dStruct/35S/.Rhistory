,col=heat.colors(10)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
labels
source('C:/Users/maran/Desktop/paolo-bumhmm/code_v17052018/code_v17052018/synth_bummhmm_diff.R')
labels
B = matrix(c(1, 0, 0, 0,1, 0, 0, 0,0, 0, 1, 0,0, 0, 1, 0,0, 0, 1, 0,0, 1, 0, 0),ncol=4, byrow = TRUE)
heatmap(B
,scale = 'none'
,col=heat.colors(10)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
B = matrix(c(1, 0, 0, 0,1, 0, 0, 0,0, 0, 1, 0,0, 0, 1, 0,0, 0, 1, 0,0, 1, 0, 0),ncol=4, byrow = TRUE)
heatmap(B
,scale = 'none'
,col=heat.colors(10)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
B = matrix(c(1, 0, 0, 0,1, 0, 0, 0,0, 0, 1, 0,0, 0, 1, 0,0, 0, 1, 0,0, 1, 0, 0, 0, 0, 1, 0,),ncol=4, byrow = TRUE)
heatmap(B
,scale = 'none'
,col=heat.colors(10)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
B = matrix(c(1, 0, 0, 0,1, 0, 0, 0,0, 0, 1, 0,0, 0, 1, 0,0, 0, 1, 0,0, 1, 0, 0, 0, 0, 1, 0,),ncol=4, byrow = TRUE)
B = matrix(c(1, 0, 0, 0,1, 0, 0, 0,0, 0, 1, 0,0, 0, 1, 0,0, 0, 1, 0,0, 1, 0, 0, 0, 0, 1, 0),ncol=4, byrow = TRUE)
heatmap(B
,scale = 'none'
,col=heat.colors(10)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
B = matrix(c(1, 0, 0, 0,1, 0, 0, 0,0, 0, 1, 0,0, 0, 1, 0,0, 0, 1, 0,0, 0, 1, 0, 0, 1, 0, 0),ncol=4, byrow = TRUE)
heatmap(B
,scale = 'none'
,col=heat.colors(10)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
print(t(posterior))
A=t(posterior)
heatmap(A,
,scale = 'none'
,col=heat.colors(10)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
heatmap(A[1:7,],
,scale = 'none'
,col=heat.colors(10)
,main="Modelled Data"
,Rowv=NA
,Colv=NA)
source('C:/Users/maran/Desktop/paolo-bumhmm/code_v17052018/code_v17052018/synth_bummhmm_diff.R')
posterior[1:5,]
posterior[1:4,]
posterior[1:4,1:4]
heatmap(posterior[1:4,1:10]
,scale = 'column'
,col=heat.colors(256)
,main='Treatment_Coverage'
,Rowv=NA
,Colv=NA)
heatmap(posterior[1:4,1:10]
,scale = 'column'
,col=heat.colors(10)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
posterior[1:4,1:10]
posterior[1:10,1:4]
t(posterior)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(10)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(256)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior[1:10,]
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(20)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(15)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
heatmap(posterior[1:4,1:10]
,scale = 'column'
,col=heat.colors(256)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
posterior[1:4,1:10]
heatmap(posterior[1:4,1:10]
,scale = 'none'
,col=heat.colors(256)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
heatmap(posterior[1:4,1:10]
,scale = 'column'
,col=heat.colors(256)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(15)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(10)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'none'
,col=heat.colors(10)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
?heatmap
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'row'
,col=heat.colors(10)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
View(transpose_posterior)
trans <- matrix(c(0.95, 0.2, 0.05, 0.8), nrow=2, ncol=2)
t(trans)
getwd()
print(correct_prop)
print(correct_prop)
#_________________SYNTHETIC CODE GENERATION________________________________________
library(BUMHMM)
### Generate synthetic data
alpha = 1
beta = 10
E = 2 # Number of experimental comparisons
trans <- matrix(c(0.95, 0.2, 0.05, 0.8), nrow = 2, ncol = 2)
trans <- t(trans)
curr_state = 1
N = 10000
Pvals = matrix(0, nrow = E, ncol = N)
all_states = c()
for (i in 1:N) {
if (curr_state ==1){curr_state = rbinom(1, 1, trans[, curr_state]) + 1}
else if (curr_state == 2){if (rbinom(1, 1, trans[, curr_state]) == 0) {curr_state = 2} else {curr_state =1}}
all_states[i] = curr_state
for (e in 1:E) {
if (curr_state == 1) {
Pvals[e,i] = runif(1)
} else if (curr_state == 2) {
Pvals[e,i] = rbeta(1, alpha, beta)
}
}
}
# Obtain generated p-values and latent states
p <- t(Pvals)
### Run BUMHMM on the generated p-valus
out <- BUMHMM:::hmmFwbw(Pvals, trans, c(0.5, 0.5), alpha, beta)
out <- t(out)
# Check if the predicted states match the latent (true) states
labels <- apply(X = out, MARGIN = 1, FUN = function(x) which(x == max(x, na.rm = TRUE)))
correct_prop <- length(which(all_states == labels)) / N
print(correct_prop)
ls
x= c(1,2,3)
x
class(x)
x = c(0,1,2,3,4,5,6,7,8,9)
0:100
x1= 0:100
y = 3+2*x1
plot(x1, y)
seq{0,10, by=0.5}
seq(0,10, by=0.5)
seq(0,10, length=31)
legend(’topright’, lty=c(3,2), col=c(’red’, ’blue’), lwd=2,
legend=c(’pop mean’, ’sample mean’), cex=0.8) #adds the legend
legend(’topright’, lty=c(3,2), col=c(’red’, ’blue’), lwd=2,
legend=c(’pop mean’, ’sample mean’), cex=0.8) #adds the legend
### Draws and plots a sample from the standard normal distribution
n = 50 # sample size
x = rnorm(n, 0, 1) #draws the sample
x.bar = mean(x) #sample mean
br = seq(min(x), max(x), length=13) #sets breaks for the histogram
hist(x, col=’wheat’, breaks=br) # makes the histogram
abline(v=0, lty=3, col=’red’, lwd=2) # adds population line
abline(v=x.bar, lty=2, col=’blue’, lwd=2) # adds sample line
legend(’topright’, lty=c(3,2), col=c(’red’, ’blue’), lwd=2,legend=c(’pop mean’, ’sample mean’), cex=0.8) #adds the legend
### Draws and plots a sample from the standard normal distribution
n = 50 # sample size
x = rnorm(n, 0, 1) #draws the sample
x.bar = mean(x) #sample mean
br = seq(min(x), max(x), length=13) #sets breaks for the histogram
hist(x, col=’wheat’, breaks=br) # makes the histogram
abline(v=0, lty=3, col=’red’, lwd=2) # adds population line
abline(v=x.bar, lty=2, col=’blue’, lwd=2) # adds sample line
legend(’topright’, lty=c(3,2), col=c(’red’, ’blue’), lwd=2, legend=c(’pop mean’, ’sample mean’), cex=0.8) #adds the l
qnorm(97.5)
qnorm(0.975)
library(parallel)
detectCores()
(cl=makeCluster(detectCores()))
library(parallel)
detectCores()
(cl=makeCluster(detectCores()))
library(parallel)
detectCores()
(cl=makeCluster(detectCores()))
(parLapply( cl, coreList, function(x) paste("pid "Sys.getpid(), " run on core", x)))
( parLapply( cl, coreList, function(x) paste("pid "sys.getpid(), " run on core", x)))
proc.time()[1:5]
system.time(Sys.sleep(1))
system.time(Sys.sleep(1))[1:5]
trans <- matrix(c(0.8, 0.1, 0.1, 0.1,
0.05, 0.6, 0.15, 0.05,
0.05, 0.15, 0.6, 0.05,
0.1, 0.15, 0.15, 0.8), nrow = 4, ncol = 4, byrow = TRUE)
trans
####Maximisation of log-likelihood for Poisson ditribution
set.seed(600) # set a random seed for reproducibility of results
data <- rpois(n=150,20)
poisson_loglikelihood <- function(lambda,x)
{
n <-length(x) # n is the sample size
llik <- -n*lambda+sum(x*log(lambda))-sum(log(factorial(x)))
return(llik)
}
maximisation <- optimize(poisson_loglikelihood,
interval=c(1,50),x=data,maximum=TRUE)
maximisation
####Maximisation of log-likelihood for Poisson ditribution
set.seed(600) # set a random seed for reproducibility of results
data <- rpois(n=150,20)
poisson_loglikelihood <- function(lambda,x)
{
n <-length(x) # n is the sample size
llik <- -n*lambda+sum(x*log(lambda))-sum(log(factorial(x)))
return(llik)
}
maximisation <- optimize(poisson_loglikelihood,
interval=c(1,50),x=data,maximum=TRUE)
>maximisation
####Maximisation of log-likelihood for Poisson ditribution
set.seed(600) # set a random seed for reproducibility of results
data <- rpois(n=150,20)
poisson_loglikelihood <- function(lambda,x)
{
n <-length(x) # n is the sample size
llik <- -n*lambda+sum(x*log(lambda))-sum(log(factorial(x)))
return(llik)
}
maximisation <- optimize(poisson_loglikelihood,
interval=c(1,50),x=data,maximum=TRUE)
maximisation
#The following code draws 5000 samples of size 150 from a Poisson(20) and each time time stores the MLE to the vector mle.
set.seed(400) # set a random seed for reproducibility of results
mle <- NULL
for (i in 1:5000){
x <- rpois(n=150,20) # draw a sample of size 150 from Poisson(l=20)
mle[i] <- mean(x) # This only works because the MLE for a poisson is the mean. MLE might not be equivalent to the mean for different for other distributions
}
m <- mean(mle)
v <- var(mle)
c(m,v)
hist(mle,xlab=expression(hat(lambda)),freq=FALSE)
abline(v=m,col=2, lty=2,lwd=2)
# Add the line of a normal curve with mean=20, sigma=0.134
z <- seq(18,22,length=1000)
lines(z,dnorm(z, 20, sqrt(0.134)),col=4)
c(quantile(mle,0.025), quantile(mle,0.975))
abline(v=quantile(mle,0.975),col=2,lty=2,lwd=2)
abline(v=quantile(mle,0.025),col=2,lty=2,lwd=2)
nrows = 320
ncols = 11000
set.seed(1)
in_data = rnorm(nrows*ncols)
nCores = detectCores()
library(parallel)
nCores = detectCores()
?cor
git branch
ls
ls
ls
source("https://bioconductor.org/biocLite.R")
devtools::install_github("renanxcortes/springerQuarantineBooksR")
version
#### ------- PACKAGES INSTALLATION AND IMPORT OF HELPER FUNCTIONS ------ ######
# This sripts assumes: R version 3.6.3 (2020-02-29); RStudio Version 1.1.442
install.packages("devtools")
library(dStruct)
library(ggplot2)
library(reshape2)
library(formattable)
working_directory <- getwd()
#### ------- LOADING DATA ------ ######
table1_incell <- read.delim("Data/XIST_1M7_in-cell_rep1.txt", stringsAsFactors=FALSE, col.names= c("chromosome","position","in_cell_DMSO1_read_count","in_cell_DMSO1_mutation_rate","in_cell_1M71_read_count","in_cell_1M71_mutation_rate"))
table2_incell <- read.delim("Data/XIST_1M7_in-cell_rep2.txt", stringsAsFactors=FALSE, col.names= c("chromosome","position","in_cell_DMSO2_read_count","in_cell_DMSO2_mutation_rate","in_cell_1M72_read_count","in_cell_1M72_mutation_rate"))
table1_exvivo <- read.delim("Data/XIST_1M7_ex-vivo_rep1.txt", stringsAsFactors=FALSE, col.names= c("chromosome","position","ex_vivo_DMSO1_read_count","ex_vivo_DMSO1_mutation_rate","ex_vivo_1M71_read_count","ex_vivo_1M71_mutation_rate"))
table2_exvivo <- read.delim("Data/XIST_1M7_ex-vivo_rep2.txt", stringsAsFactors=FALSE, col.names= c("chromosome","position","ex_vivo_DMSO2_read_count","ex_vivo_DMSO2_mutation_rate","ex_vivo_1M72_read_count","ex_vivo_1M72_mutation_rate"))
head(table1_incell["in_cell_DMSO1_read_count"])
dc_incell <- read.delim("Xist_1M7_in-cell_wDC.txt", stringsAsFactors=FALSE, col.names= c("chromosome","position","in_cell_DMSO1_read_count","in_cell_DMSO1_mutation_rate","in_cell_1M71_read_count","in_cell_1M71_mutation_rate","DC_read_count" ,"DC_mutation_rate"))
dc_exvivo <- read.delim("XIST_1M7_ex-vivo_wDC.txt", stringsAsFactors=FALSE, col.names= c("chromosome","position","ex_vivo_DMSO1_read_count","ex_vivo_DMSO1_mutation_rate","ex_vivo_1M71_read_count","ex_vivo_1M71_mutation_rate","DC_read_count" ,"DC_mutation_rate"))
#READ COUNTS  i.e COVERAGE
incell_counts <- data.frame("in_cell_DMSO1_read_count" = table1_incell["in_cell_DMSO1_read_count"],"in_cell_DMSO2_read_count" = table2_incell["in_cell_DMSO2_read_count"],"X1M7_1_read_count" = table1_incell["in_cell_1M71_read_count"],"X1M7_2_read_count"= table2_incell["in_cell_1M72_read_count"])
exvivo_counts <- data.frame("ex_vivo_DMSO1_read_count" = table1_exvivo["ex_vivo_DMSO1_read_count"],"ex_vivo_DMSO2_read_count" = table2_exvivo["ex_vivo_DMSO2_read_count"],"X1M7_1_read_count" = table1_exvivo["ex_vivo_1M71_read_count"],"X1M7_2_read_count"= table2_exvivo["ex_vivo_1M72_read_count"])
head(incell_counts)
head(exvivo_counts)
#MUTATION RATES
incell_rates <- data.frame("in_cell_DMSO1_mutation_rate" = table1_incell["in_cell_DMSO1_mutation_rate"],"in_cell_DMSO2_mutation_rate" = table2_incell["in_cell_DMSO2_mutation_rate"],"X1M7_1_mutation_rate" = table1_incell["in_cell_1M71_mutation_rate"],"X1M7_2_mutation_rate"= table2_incell["in_cell_1M72_mutation_rate"])
exvivo_rates <- data.frame("ex_vivo_DMSO1_mutation_rate" = table1_exvivo["ex_vivo_DMSO1_mutation_rate"],"ex_vivo_DMSO2_mutation_rate" = table2_exvivo["ex_vivo_DMSO2_mutation_rate"],"X1M7_1_mutation_rate" = table1_exvivo["ex_vivo_1M71_mutation_rate"],"X1M7_2_mutation_rate"= table2_exvivo["ex_vivo_1M72_mutation_rate"])
# DENATURED CONTROLS
dc_incell_column <- data.frame("DC_mutation_rate"=dc_incell["DC_mutation_rate"] )
dc_exvivo_column <- data.frame("DC_mutation_rate"=dc_exvivo["DC_mutation_rate"])
incell_DMSO= data.frame("DMSO_1"=table1_incell["in_cell_DMSO1_mutation_rate"], "DMSO_2"=table2_incell["in_cell_DMSO2_mutation_rate"])
incell_1M7 = data.frame("1M7_1"=table1_incell["in_cell_1M71_mutation_rate"], "DMSO_2"=table2_incell["in_cell_1M72_mutation_rate"])
exvivo_DMSO= data.frame("DMSO_1"=table1_exvivo["ex_vivo_DMSO1_mutation_rate"], "DMSO_2"=table2_exvivo["ex_vivo_DMSO2_mutation_rate"])
exvivo_1M7 = data.frame("1M7_1"=table1_exvivo["ex_vivo_1M71_mutation_rate"], "DMSO_2"=table2_exvivo["ex_vivo_1M72_mutation_rate"])
incell_substracted=incell_1M7 - incell_DMSO
exvivo_substracted=exvivo_1M7 - exvivo_DMSO
incell_rates = formattable(incell_substracted,digits = 8, format = "f" )
exvivo_rates = formattable(exvivo_substracted,digits = 8, format = "f" )
dc_incell_column = formattable(dc_incell_column, digits = 8, format = "f" )
dc_exvivo_column = formattable(dc_exvivo_column,digits = 8, format = "f" )
scaled_incell_rates <- incell_rates[,] / dc_incell_column
scaled_exvivo_rates <- exvivo_rates[,] / dc_exvivo_column
is.na(scaled_incell_rates)<-sapply(scaled_incell_rates, is.infinite)
scaled_incell_rates[is.na(scaled_incell_rates)]<-0
is.na(scaled_exvivo_rates)<-sapply(scaled_exvivo_rates, is.infinite)
scaled_exvivo_rates[is.na(scaled_exvivo_rates)]<-0
attributes(scaled_incell_rates) <- NULL
attributes(scaled_exvivo_rates) <- NULL
n <- length(scaled_incell_rates[[1]])
scaled_incell_rates_df  <- structure(scaled_incell_rates,  row.names = c(NA, -n), class = "data.frame")
colnames(scaled_incell_rates_df) <- c("in_cell_mutation_rate_rep1", "in_cell_mutation_rate_rep2")
scaled_exvivo_rates_df  <- structure(scaled_exvivo_rates,  row.names = c(NA, -n), class = "data.frame")
colnames(scaled_exvivo_rates_df) <- c("ex_vivo_mutation_rate_rep1", "ex_vivo_mutation_rate_rep2")
scaled_incell_rates_df[2500:4500,]=0
scaled_exvivo_rates_df[2500:4500,]=0
scaled_incell_rates_df[1:78,]=0
scaled_exvivo_rates_df[1:78,]=0
scaled_incell_rates_df[2451:2599,]=0
scaled_exvivo_rates_df[2451:2599,]=0
scaled_incell_rates_df[17801:17918,]=0
scaled_exvivo_rates_df[17801:17918,]=0
scaled_incell_rates_2_8_norm <- apply(scaled_incell_rates_df, 2, two.eight.normalize)
scaled_exvivo_rates_2_8_norm <- apply(scaled_exvivo_rates_df, 2, two.eight.normalize)
reac <- cbind(scaled_incell_rates_2_8_norm, scaled_exvivo_rates_2_8_norm)
colnames(reac) <- c("A1", "A2", "B1", "B2")
reac[reac<0] <- 0
reac <- as.data.frame(reac)
result <- dStruct(reac, reps_A = 2, reps_B = 2, min_length = 1) #Change the search length here
res <- subset(result, FDR < 0.42) #Change the FDR level here.
setwd("Analysis/dStruct/Xist")
write.table(res,sep="\t",quote=FALSE,file='output_dStruct_Xist_res_table_1nt.txt', row.names = FALSE)
#----- PLOTTING RESULTS OF DSTRUCT (OPTIONAL) -----
#
#df <- melt(data.frame(reac, n = 1:nrow(reac)), id.vars = "n")
#for (i in 1:nrow(res)) {
#	  ggsave(paste0(res$Start[i], "_", res$Stop[i], ".pdf"), #
#		          print(ggplot(df, aes(x= n, y = value)) + geom_bar(stat = "identity") +
#				          xlab("Nucleotide") + ylab("Normalized reactivity") +
#					      facet_grid(variable~.) +
#					            coord_cartesian(ylim = c(0, 3), xlim = c(res$Start[i], res$Stop[i]))),
#		     width = 7, height = 7, units = "in")
#}
library(dStruct)
library(ggplot2)
library(reshape2)
library(formattable)
setwd('..')
getwd()
library(dStruct)
library(ggplot2)
library(reshape2)
library(formattable)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd('..')
getwd()
#### ------- LOADING DATA ------ ######
table1_incell <- read.delim("Data/Xist_data_from_Weeks_lab/XIST_1M7_in-cell_rep1.txt", stringsAsFactors=FALSE, col.names= c("chromosome","position","in_cell_DMSO1_read_count","in_cell_DMSO1_mutation_rate","in_cell_1M71_read_count","in_cell_1M71_mutation_rate"))
table2_incell <- read.delim("Data/Xist_data_from_Weeks_lab/XIST_1M7_in-cell_rep2.txt", stringsAsFactors=FALSE, col.names= c("chromosome","position","in_cell_DMSO2_read_count","in_cell_DMSO2_mutation_rate","in_cell_1M72_read_count","in_cell_1M72_mutation_rate"))
table1_exvivo <- read.delim("Data/Xist_data_from_Weeks_lab/XIST_1M7_ex-vivo_rep1.txt", stringsAsFactors=FALSE, col.names= c("chromosome","position","ex_vivo_DMSO1_read_count","ex_vivo_DMSO1_mutation_rate","ex_vivo_1M71_read_count","ex_vivo_1M71_mutation_rate"))
table2_exvivo <- read.delim("Data/Xist_data_from_Weeks_lab/XIST_1M7_ex-vivo_rep2.txt", stringsAsFactors=FALSE, col.names= c("chromosome","position","ex_vivo_DMSO2_read_count","ex_vivo_DMSO2_mutation_rate","ex_vivo_1M72_read_count","ex_vivo_1M72_mutation_rate"))
head(table1_incell["in_cell_DMSO1_read_count"])
dc_incell <- read.delim("Data/Xist_data_from_Weeks_lab/Xist_1M7_in-cell_wDC.txt", stringsAsFactors=FALSE, col.names= c("chromosome","position","in_cell_DMSO1_read_count","in_cell_DMSO1_mutation_rate","in_cell_1M71_read_count","in_cell_1M71_mutation_rate","DC_read_count" ,"DC_mutation_rate"))
dc_exvivo <- read.delim("Data/Xist_data_from_Weeks_lab/XIST_1M7_ex-vivo_wDC.txt", stringsAsFactors=FALSE, col.names= c("chromosome","position","ex_vivo_DMSO1_read_count","ex_vivo_DMSO1_mutation_rate","ex_vivo_1M71_read_count","ex_vivo_1M71_mutation_rate","DC_read_count" ,"DC_mutation_rate"))
#READ COUNTS  i.e COVERAGE
incell_counts <- data.frame("in_cell_DMSO1_read_count" = table1_incell["in_cell_DMSO1_read_count"],"in_cell_DMSO2_read_count" = table2_incell["in_cell_DMSO2_read_count"],"X1M7_1_read_count" = table1_incell["in_cell_1M71_read_count"],"X1M7_2_read_count"= table2_incell["in_cell_1M72_read_count"])
exvivo_counts <- data.frame("ex_vivo_DMSO1_read_count" = table1_exvivo["ex_vivo_DMSO1_read_count"],"ex_vivo_DMSO2_read_count" = table2_exvivo["ex_vivo_DMSO2_read_count"],"X1M7_1_read_count" = table1_exvivo["ex_vivo_1M71_read_count"],"X1M7_2_read_count"= table2_exvivo["ex_vivo_1M72_read_count"])
head(incell_counts)
head(exvivo_counts)
#MUTATION RATES
incell_rates <- data.frame("in_cell_DMSO1_mutation_rate" = table1_incell["in_cell_DMSO1_mutation_rate"],"in_cell_DMSO2_mutation_rate" = table2_incell["in_cell_DMSO2_mutation_rate"],"X1M7_1_mutation_rate" = table1_incell["in_cell_1M71_mutation_rate"],"X1M7_2_mutation_rate"= table2_incell["in_cell_1M72_mutation_rate"])
exvivo_rates <- data.frame("ex_vivo_DMSO1_mutation_rate" = table1_exvivo["ex_vivo_DMSO1_mutation_rate"],"ex_vivo_DMSO2_mutation_rate" = table2_exvivo["ex_vivo_DMSO2_mutation_rate"],"X1M7_1_mutation_rate" = table1_exvivo["ex_vivo_1M71_mutation_rate"],"X1M7_2_mutation_rate"= table2_exvivo["ex_vivo_1M72_mutation_rate"])
# DENATURED CONTROLS
dc_incell_column <- data.frame("DC_mutation_rate"=dc_incell["DC_mutation_rate"] )
dc_exvivo_column <- data.frame("DC_mutation_rate"=dc_exvivo["DC_mutation_rate"])
incell_DMSO= data.frame("DMSO_1"=table1_incell["in_cell_DMSO1_mutation_rate"], "DMSO_2"=table2_incell["in_cell_DMSO2_mutation_rate"])
incell_1M7 = data.frame("1M7_1"=table1_incell["in_cell_1M71_mutation_rate"], "DMSO_2"=table2_incell["in_cell_1M72_mutation_rate"])
exvivo_DMSO= data.frame("DMSO_1"=table1_exvivo["ex_vivo_DMSO1_mutation_rate"], "DMSO_2"=table2_exvivo["ex_vivo_DMSO2_mutation_rate"])
exvivo_1M7 = data.frame("1M7_1"=table1_exvivo["ex_vivo_1M71_mutation_rate"], "DMSO_2"=table2_exvivo["ex_vivo_1M72_mutation_rate"])
incell_substracted=incell_1M7 - incell_DMSO
exvivo_substracted=exvivo_1M7 - exvivo_DMSO
incell_rates = formattable(incell_substracted,digits = 8, format = "f" )
exvivo_rates = formattable(exvivo_substracted,digits = 8, format = "f" )
dc_incell_column = formattable(dc_incell_column, digits = 8, format = "f" )
dc_exvivo_column = formattable(dc_exvivo_column,digits = 8, format = "f" )
scaled_incell_rates <- incell_rates[,] / dc_incell_column
scaled_exvivo_rates <- exvivo_rates[,] / dc_exvivo_column
is.na(scaled_incell_rates)<-sapply(scaled_incell_rates, is.infinite)
scaled_incell_rates[is.na(scaled_incell_rates)]<-0
is.na(scaled_exvivo_rates)<-sapply(scaled_exvivo_rates, is.infinite)
scaled_exvivo_rates[is.na(scaled_exvivo_rates)]<-0
attributes(scaled_incell_rates) <- NULL
attributes(scaled_exvivo_rates) <- NULL
n <- length(scaled_incell_rates[[1]])
scaled_incell_rates_df  <- structure(scaled_incell_rates,  row.names = c(NA, -n), class = "data.frame")
colnames(scaled_incell_rates_df) <- c("in_cell_mutation_rate_rep1", "in_cell_mutation_rate_rep2")
scaled_exvivo_rates_df  <- structure(scaled_exvivo_rates,  row.names = c(NA, -n), class = "data.frame")
colnames(scaled_exvivo_rates_df) <- c("ex_vivo_mutation_rate_rep1", "ex_vivo_mutation_rate_rep2")
scaled_incell_rates_df[2500:4500,]=0
scaled_exvivo_rates_df[2500:4500,]=0
scaled_incell_rates_df[1:78,]=0
scaled_exvivo_rates_df[1:78,]=0
scaled_incell_rates_df[2451:2599,]=0
scaled_exvivo_rates_df[2451:2599,]=0
scaled_incell_rates_df[17801:17918,]=0
scaled_exvivo_rates_df[17801:17918,]=0
scaled_incell_rates_2_8_norm <- apply(scaled_incell_rates_df, 2, two.eight.normalize)
scaled_exvivo_rates_2_8_norm <- apply(scaled_exvivo_rates_df, 2, two.eight.normalize)
reac <- cbind(scaled_incell_rates_2_8_norm, scaled_exvivo_rates_2_8_norm)
colnames(reac) <- c("A1", "A2", "B1", "B2")
reac[reac<0] <- 0
reac <- as.data.frame(reac)
result <- dStruct(reac, reps_A = 2, reps_B = 2, min_length = 1) #Change the search length here
res <- subset(result, FDR < 0.42) #Change the FDR level here.
setwd("Analysis/dStruct/Xist")
write.table(res,sep="\t",quote=FALSE,file='output_dStruct_Xist_res_table_1nt.txt', row.names = FALSE)
#----- PLOTTING RESULTS OF DSTRUCT (OPTIONAL) -----
#
#df <- melt(data.frame(reac, n = 1:nrow(reac)), id.vars = "n")
#for (i in 1:nrow(res)) {
#	  ggsave(paste0(res$Start[i], "_", res$Stop[i], ".pdf"), #
#		          print(ggplot(df, aes(x= n, y = value)) + geom_bar(stat = "identity") +
#				          xlab("Nucleotide") + ylab("Normalized reactivity") +
#					      facet_grid(variable~.) +
#					            coord_cartesian(ylim = c(0, 3), xlim = c(res$Start[i], res$Stop[i]))),
#		     width = 7, height = 7, units = "in")
#}
library(dStruct)
library(ggplot2)
library(reshape2)
library(formattable)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd('..')
getwd()
a_cnts <- read.table("Data/35S_data/35S_control_delta5_merged_dropoffcounts.sgr",
sep = "\t", header= T)
a_cov <- read.table("Data/35S_data/35S_control_delta5_merged_reads.sgr",
sep = "\t", header= T)
b_cnts <- read.table("Data/35S_data/35S_control_Erb1_merged_dropoffcounts.sgr",
sep = "\t", header= T)
b_cov <- read.table("Data/35S_data/35S_control_Erb1_merged_reads.sgr",
sep = "\t", header= T)
a_rates <- a_cnts[, 3:6]/a_cov[, 3:6]
b_rates <- b_cnts[, 3:6]/b_cov[, 3:6]
a_raw_reac <- (a_rates[, 3:4] - a_rates[, 1:2])/(1 - a_rates[, 1:2])
b_raw_reac <- (b_rates[, 3:4] - b_rates[, 1:2])/(1 - b_rates[, 1:2])
a_raw_reac_rates_2_8_norm <- apply(a_raw_reac , 2, two.eight.normalize)
b_raw_reac_rates_2_8_norm <- apply(b_raw_reac, 2, two.eight.normalize)
reac <- cbind(a_raw_reac_rates_2_8_norm , b_raw_reac_rates_2_8_norm)
colnames(reac) <- c("A1", "A2", "B1", "B2")
reac[reac<0] <- 0
reac <- as.data.frame(reac)
result <- dStruct(reac, reps_A = 2, reps_B = 2, min_length = 1) #Change the search length here
res <- subset(result, FDR < 0.20) #Change the FDR level here.
setwd("Analysis/dStruct/35S")
write.table(res,sep="\t",quote=FALSE,file='output_dStruct_35S_res_table_1nt.txt', row.names = FALSE)
View(reac)
