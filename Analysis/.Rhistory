print(t(posterior))
A=t(posterior)
heatmap(A,
,scale = 'none'
,col=heat.colors(10)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
heatmap(A[1:7,],
,scale = 'none'
,col=heat.colors(10)
,main="Modelled Data"
,Rowv=NA
,Colv=NA)
source('C:/Users/maran/Desktop/paolo-bumhmm/code_v17052018/code_v17052018/synth_bummhmm_diff.R')
posterior[1:5,]
posterior[1:4,]
posterior[1:4,1:4]
heatmap(posterior[1:4,1:10]
,scale = 'column'
,col=heat.colors(256)
,main='Treatment_Coverage'
,Rowv=NA
,Colv=NA)
heatmap(posterior[1:4,1:10]
,scale = 'column'
,col=heat.colors(10)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
posterior[1:4,1:10]
posterior[1:10,1:4]
t(posterior)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(10)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(256)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior[1:10,]
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(20)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(15)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
heatmap(posterior[1:4,1:10]
,scale = 'column'
,col=heat.colors(256)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
posterior[1:4,1:10]
heatmap(posterior[1:4,1:10]
,scale = 'none'
,col=heat.colors(256)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
heatmap(posterior[1:4,1:10]
,scale = 'column'
,col=heat.colors(256)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(15)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(10)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'none'
,col=heat.colors(10)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
?heatmap
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'row'
,col=heat.colors(10)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
View(transpose_posterior)
trans <- matrix(c(0.95, 0.2, 0.05, 0.8), nrow=2, ncol=2)
t(trans)
getwd()
print(correct_prop)
print(correct_prop)
#_________________SYNTHETIC CODE GENERATION________________________________________
library(BUMHMM)
### Generate synthetic data
alpha = 1
beta = 10
E = 2 # Number of experimental comparisons
trans <- matrix(c(0.95, 0.2, 0.05, 0.8), nrow = 2, ncol = 2)
trans <- t(trans)
curr_state = 1
N = 10000
Pvals = matrix(0, nrow = E, ncol = N)
all_states = c()
for (i in 1:N) {
if (curr_state ==1){curr_state = rbinom(1, 1, trans[, curr_state]) + 1}
else if (curr_state == 2){if (rbinom(1, 1, trans[, curr_state]) == 0) {curr_state = 2} else {curr_state =1}}
all_states[i] = curr_state
for (e in 1:E) {
if (curr_state == 1) {
Pvals[e,i] = runif(1)
} else if (curr_state == 2) {
Pvals[e,i] = rbeta(1, alpha, beta)
}
}
}
# Obtain generated p-values and latent states
p <- t(Pvals)
### Run BUMHMM on the generated p-valus
out <- BUMHMM:::hmmFwbw(Pvals, trans, c(0.5, 0.5), alpha, beta)
out <- t(out)
# Check if the predicted states match the latent (true) states
labels <- apply(X = out, MARGIN = 1, FUN = function(x) which(x == max(x, na.rm = TRUE)))
correct_prop <- length(which(all_states == labels)) / N
print(correct_prop)
ls
x= c(1,2,3)
x
class(x)
x = c(0,1,2,3,4,5,6,7,8,9)
0:100
x1= 0:100
y = 3+2*x1
plot(x1, y)
seq{0,10, by=0.5}
seq(0,10, by=0.5)
seq(0,10, length=31)
legend(’topright’, lty=c(3,2), col=c(’red’, ’blue’), lwd=2,
legend=c(’pop mean’, ’sample mean’), cex=0.8) #adds the legend
legend(’topright’, lty=c(3,2), col=c(’red’, ’blue’), lwd=2,
legend=c(’pop mean’, ’sample mean’), cex=0.8) #adds the legend
### Draws and plots a sample from the standard normal distribution
n = 50 # sample size
x = rnorm(n, 0, 1) #draws the sample
x.bar = mean(x) #sample mean
br = seq(min(x), max(x), length=13) #sets breaks for the histogram
hist(x, col=’wheat’, breaks=br) # makes the histogram
abline(v=0, lty=3, col=’red’, lwd=2) # adds population line
abline(v=x.bar, lty=2, col=’blue’, lwd=2) # adds sample line
legend(’topright’, lty=c(3,2), col=c(’red’, ’blue’), lwd=2,legend=c(’pop mean’, ’sample mean’), cex=0.8) #adds the legend
### Draws and plots a sample from the standard normal distribution
n = 50 # sample size
x = rnorm(n, 0, 1) #draws the sample
x.bar = mean(x) #sample mean
br = seq(min(x), max(x), length=13) #sets breaks for the histogram
hist(x, col=’wheat’, breaks=br) # makes the histogram
abline(v=0, lty=3, col=’red’, lwd=2) # adds population line
abline(v=x.bar, lty=2, col=’blue’, lwd=2) # adds sample line
legend(’topright’, lty=c(3,2), col=c(’red’, ’blue’), lwd=2, legend=c(’pop mean’, ’sample mean’), cex=0.8) #adds the l
qnorm(97.5)
qnorm(0.975)
library(parallel)
detectCores()
(cl=makeCluster(detectCores()))
library(parallel)
detectCores()
(cl=makeCluster(detectCores()))
library(parallel)
detectCores()
(cl=makeCluster(detectCores()))
(parLapply( cl, coreList, function(x) paste("pid "Sys.getpid(), " run on core", x)))
( parLapply( cl, coreList, function(x) paste("pid "sys.getpid(), " run on core", x)))
proc.time()[1:5]
system.time(Sys.sleep(1))
system.time(Sys.sleep(1))[1:5]
trans <- matrix(c(0.8, 0.1, 0.1, 0.1,
0.05, 0.6, 0.15, 0.05,
0.05, 0.15, 0.6, 0.05,
0.1, 0.15, 0.15, 0.8), nrow = 4, ncol = 4, byrow = TRUE)
trans
####Maximisation of log-likelihood for Poisson ditribution
set.seed(600) # set a random seed for reproducibility of results
data <- rpois(n=150,20)
poisson_loglikelihood <- function(lambda,x)
{
n <-length(x) # n is the sample size
llik <- -n*lambda+sum(x*log(lambda))-sum(log(factorial(x)))
return(llik)
}
maximisation <- optimize(poisson_loglikelihood,
interval=c(1,50),x=data,maximum=TRUE)
maximisation
####Maximisation of log-likelihood for Poisson ditribution
set.seed(600) # set a random seed for reproducibility of results
data <- rpois(n=150,20)
poisson_loglikelihood <- function(lambda,x)
{
n <-length(x) # n is the sample size
llik <- -n*lambda+sum(x*log(lambda))-sum(log(factorial(x)))
return(llik)
}
maximisation <- optimize(poisson_loglikelihood,
interval=c(1,50),x=data,maximum=TRUE)
>maximisation
####Maximisation of log-likelihood for Poisson ditribution
set.seed(600) # set a random seed for reproducibility of results
data <- rpois(n=150,20)
poisson_loglikelihood <- function(lambda,x)
{
n <-length(x) # n is the sample size
llik <- -n*lambda+sum(x*log(lambda))-sum(log(factorial(x)))
return(llik)
}
maximisation <- optimize(poisson_loglikelihood,
interval=c(1,50),x=data,maximum=TRUE)
maximisation
#The following code draws 5000 samples of size 150 from a Poisson(20) and each time time stores the MLE to the vector mle.
set.seed(400) # set a random seed for reproducibility of results
mle <- NULL
for (i in 1:5000){
x <- rpois(n=150,20) # draw a sample of size 150 from Poisson(l=20)
mle[i] <- mean(x) # This only works because the MLE for a poisson is the mean. MLE might not be equivalent to the mean for different for other distributions
}
m <- mean(mle)
v <- var(mle)
c(m,v)
hist(mle,xlab=expression(hat(lambda)),freq=FALSE)
abline(v=m,col=2, lty=2,lwd=2)
# Add the line of a normal curve with mean=20, sigma=0.134
z <- seq(18,22,length=1000)
lines(z,dnorm(z, 20, sqrt(0.134)),col=4)
c(quantile(mle,0.025), quantile(mle,0.975))
abline(v=quantile(mle,0.975),col=2,lty=2,lwd=2)
abline(v=quantile(mle,0.025),col=2,lty=2,lwd=2)
nrows = 320
ncols = 11000
set.seed(1)
in_data = rnorm(nrows*ncols)
nCores = detectCores()
library(parallel)
nCores = detectCores()
?cor
git branch
ls
ls
ls
source("https://bioconductor.org/biocLite.R")
devtools::install_github("renanxcortes/springerQuarantineBooksR")
version
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd('..')
getwd()
setwd("Analysis/LMR_and_LDR_plots/Xist")
getwd()
setwd('..')
setwd('..')
setwd('..')
getwd()
#### ------- PACKAGES INSTALLATION AND IMPORT OF HELPER FUNCTIONS ------ ######
# This sripts assumes: R version 3.6.3 (2020-02-29); RStudio Version 1.1.442
install.packages("rstudioapi")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
install.packages("BiocManager")
install.packages("formattable")
BiocManager::install(c("Biostrings", "SummarizedExperiment"), version = "3.10")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd('..')
source("Functions/computePvals.R")
source("Functions/calculateLDRs.R")
source("Functions/hmmFwbw_differential_two_betas.R")
source("Functions/betaParamsEM.R")
source("Functions/betaParamsMStep.R")
source("Functions/findPatternPos.R")
source("Functions/nuclPerm.R")
source("Functions/scaleDOR.R")
source("Functions/selectNuclPos.R")
source("Functions/computeStretches.R")
source("Functions/stabiliseVariance.R")
suppressPackageStartupMessages({
library(Biostrings)
library(SummarizedExperiment) })
noreplicates <- 2
setwd("Reference_sequences")
refsequence <- "35S_pre-rRNA_refseq.seq"
setwd('../Data/35S_data/')
outputfilename <-paste0('35S','_diffBUM_HMM_WT_vs_Erb1_diff_BUM_HMM_analysed','.txt')
# input the coverage and drop off counts from the working directory:
# wt:wild type; mut: mutant
mergedcountswt <- read.table("35S_control_delta5_merged_reads.sgr", comment.char="#",col.names=c("chromosome","position","35S_control_1_trimmed_plus_strand_startpositions","35S_control_2_trimmed_plus_strand_startpositions","35S_1M7_1_trimmed_plus_strand_startpositions","35S_1M7_2_trimmed_plus_strand_startpositions"))
mergedstartswt <- read.table("35S_control_delta5_merged_dropoffcounts.sgr",comment.char="#",col.names=c("chromosome","position","35S_control_1_trimmed_plus_strand_startpositions","35S_control_2_trimmed_plus_strand_startpositions","35S_1M7_1_trimmed_plus_strand_startpositions","35S_1M7_2_trimmed_plus_strand_startpositions"))
mergedcountsmut <- read.table("35S_control_Erb1_merged_reads.sgr", comment.char="#",col.names=c("chromosome","position","35S_control_1_trimmed_plus_strand_startpositions","35S_control_2_trimmed_plus_strand_startpositions","35S_1M7_1_trimmed_plus_strand_startpositions","35S_1M7_2_trimmed_plus_strand_startpositions"))
mergedstartsmut <- read.table("35S_control_Erb1_merged_dropoffcounts.sgr",comment.char="#",col.names=c("chromosome","position","35S_control_1_trimmed_plus_strand_startpositions","35S_control_2_trimmed_plus_strand_startpositions","35S_1M7_1_trimmed_plus_strand_startpositions","35S_1M7_2_trimmed_plus_strand_startpositions"))
setwd("./../../")
#### ------- DATA PRE-PROCESSING (CALCULATION LOG RATIOS OF MUTATION RATES AND EMPIRICAL P-VALUES ) ------- ######
## Calculating dropoff rate ratios
logdropoffswt <- calculateLDRs(mergedcountswt,mergedstartswt,noreplicates, refsequence)
logdropoffsmut <- calculateLDRs(mergedcountsmut,mergedstartsmut,noreplicates, refsequence)
setwd("Analysis/LMR_and_LDR_plots/35S/new_plots")
pdf('LDR-35S-Control1-Control2-comparison_delta5.pdf',width=6,height=4,paper='special')
hist(logdropoffswt$LDR_C, breaks = 30, main = 'Null distribution of LDRs - delta 5')
dev.off()
pdf('LDR-35S-Control1-Control2-comparison_erb1.pdf',width=6,height=4,paper='special')
hist(logdropoffsmut$LDR_C, breaks = 30, main = 'Null distribution of LDRs - erb1')
dev.off()
logdropoffsmut$LDR_CT
ldr_ct_delta5 <-- logdropoffswt$LDR_CT
ldr_ct_erb1 <-- logdropoffsmut$LDR_CT
ldr_ct_delta5
head(ldr_ct_delta5)
ldr_ct_delta5[ , 1:1]
head(ldr_ct_delta5[ , 1:1])
head(ldr_ct_delta5)
pdf('LDR-35S-Treatment1-Control1-comparison_delta5.pdf',width=6,height=4,paper='special')
hist(ldr_ct_delta5[ , 1:1], breaks = 30, main = 'LDR T1 - C1 distribution delta 5')
dev.off()
pdf('LDR-35S-Treatment1-Control2-comparison_delta5.pdf',width=6,height=4,paper='special')
hist(ldr_ct_delta5[ , 2:2], breaks = 30, main = 'LDR T1 - C2 distribution delta 5')
dev.off()
pdf('LDR-35S-Treatment2-Control1-comparison_delta5.pdf',width=6,height=4,paper='special')
hist(ldr_ct_delta5[ , 3:3], breaks = 30, main = 'LDR T2 - C1 distribution delta 5')
dev.off()
pdf('LDR-35S-Treatment2-Control2-comparison_delta5.pdf',width=6,height=4,paper='special')
hist(ldr_ct_delta5[ , 4:4], breaks = 30, main = 'LDR T2 - C2 distribution delta 5')
dev.off()
pdf('LDR-35S-Treatment1-Control1-comparison_erb1.pdf',width=6,height=4,paper='special')
hist(ldr_ct_erb1[ , 1:1], breaks = 30, main = 'LDR T1 - C1 distribution erb1')
dev.off()
pdf('LDR-35S-Treatment1-Control2-comparison_erb1.pdf',width=6,height=4,paper='special')
hist(ldr_ct_erb1[ , 2:2], breaks = 30, main = 'LDR T1 - C2 distribution erb1')
dev.off()
pdf('LDR-35S-Treatment2-Control1-comparison_erb1.pdf',width=6,height=4,paper='special')
hist(ldr_ct_erb1[ , 3:3], breaks = 30, main = 'LDR T2 - C1 distribution erb1')
dev.off()
pdf('LDR-35S-Treatment2-Control2-comparison_erb1.pdf',width=6,height=4,paper='special')
hist(ldr_ct_erb1[ , 4:4], breaks = 30, main = 'LDR T2 - C2 distribution erb1')
dev.off()
setwd('./../../..')
Nc <- Nt <- noreplicates
strand = "+"
empPvals_1 <- computePvals(logdropoffswt$LDR_C,logdropoffswt$LDR_CT, Nc, Nt, strand, logdropoffswt$nuclPosition,
logdropoffswt$nuclSelection$analysedC, logdropoffswt$nuclSelection$analysedCT)
empPvals_2 <- computePvals(logdropoffsmut$LDR_C,logdropoffsmut$LDR_CT, Nc, Nt, strand, logdropoffsmut$nuclPosition,
logdropoffsmut$nuclSelection$analysedC, logdropoffsmut$nuclSelection$analysedCT)
#stretches contain the selection of nulceotide positions that have valid log drop off rate ratios
#overlapping the stretches of nucleotides selected in each group of samples to get a representative set
stretches <-overlapsRanges(logdropoffswt$stretches,logdropoffsmut$stretches)
##Before computing posterior probabilities, we set up matrices to hold the required p-values
Pv1 <- matrix(ncol = 1,nrow = length(empPvals_1[,1]))
Pv2 <- matrix(ncol = 1,nrow = length(empPvals_2[,1]))
pvaluesstretch <-list(Pv1, Pv2)
for (i in 1:length(stretches)) {
if (i>1 & i<length(stretches)) {
## Extract start and end of a current stretch from the stretches object
## This condition is executed only for IRanges objects in stretches that are not the first or last
stretchStart <- start(stretches)[i]
stretchEnd <- end(stretches)[i]
## This loop checks stretches to see which positions meets the threshold for analysis, and extracts the corresponding pvalues from empPvals.
## The positions that are excluded from analysis (not in stretches) are given empty cells
Pv1 <-cbind(Pv1, matrix(nrow = length(empPvals_1[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv2 <-cbind(Pv2, matrix(nrow = length(empPvals_2[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv1 <- cbind(Pv1,empPvals_1[,stretchStart:stretchEnd])
Pv2 <- cbind(Pv2,empPvals_2[,stretchStart:stretchEnd])
pvaluesstretch <-list(Pv1, Pv2)
next()
} else if (i==1) {
## Extract start and end of a current stretch from the stretches object
## This condition is only executed for the first IRanges object in stretches
stretchStart <- start(stretches)[i]
stretchEnd <- end(stretches)[i]
## This condition assesses if the first object in stretches is the first nucleotide in the RNA molecule. If not, empty columns are added to the
## beginning of the Pv1 and 2 matrix.This ensures that the indexing of the output posteriors match the exact positions on the RNA molecule!
if (stretchStart != 1) {
Pv1 <- matrix(nrow = length(empPvals_1[,1]), ncol = (stretchStart-1))
Pv2 <- matrix(nrow = length(empPvals_2[,1]), ncol = (stretchStart-1))
Pv1 <- cbind(Pv1, empPvals_1[,stretchStart:stretchEnd])
Pv2 <- cbind(Pv2, empPvals_2[,stretchStart:stretchEnd])
} else if(stretchStart == 1) {
Pv1 <- empPvals_1[,stretchStart:stretchEnd]
Pv2 <- empPvals_2[,stretchStart:stretchEnd]
}
pvaluesstretch <- list(Pv1,Pv2)
next()
} else if (i == length(stretches)) {
## Extract start and end of a current stretch from the stretches object
## This condition is only executed for the last IRanges objects in stretches
stretchStart <- start(stretches)[i]
stretchEnd <- end(stretches)[i]
##In the end we add empty coulumns to the end of the Pv1 and 2 matrix as needed to match the actual length of the RNA molecule.
Pv1 <-cbind(Pv1, matrix(nrow = length(empPvals_1[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv2 <-cbind(Pv2, matrix(nrow = length(empPvals_2[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv1 <- cbind(Pv1,empPvals_1[,stretchStart:stretchEnd], matrix(nrow = length(empPvals_1[,1]), ncol = (length(empPvals_1[1,])-stretchEnd)))
Pv2 <- cbind(Pv2,empPvals_2[,stretchStart:stretchEnd], matrix(nrow = length(empPvals_2[,1]), ncol = (length(empPvals_2[1,])-stretchEnd)))
pvaluesstretch <- list(Pv1,Pv2)
}
}
View(pvaluesstretch)
setwd("Analysis/pvalues_plots/35S/new_plots")
write.table(Pv1, file="pvalues_delta5.txt", row.names=TRUE, col.names=TRUE)
write.table(Pv2, file="pvalues_deltaerb1.txt", row.names=TRUE, col.names=TRUE)
getwd()
setwd('..')
getwd()
setwd("Analysis/pvalues_plots/35S/new_plots")
write.table(Pv1, file="pvalues_delta5.txt", row.names=TRUE, col.names=TRUE)
write.table(Pv2, file="pvalues_deltaerb1.txt", row.names=TRUE, col.names=TRUE)
write.table(t(Pv1), file="pvalues_delta5.txt", row.names=TRUE, col.names=TRUE)
write.table(t(Pv2), file="pvalues_deltaerb1.txt", row.names=TRUE, col.names=TRUE)
pdf('pvalues-35S-Treatment1-Control1-comparison_delta5.pdf',width=6,height=4,paper='special')
hist(Pv1[1:1,], breaks = 30, main = 'pvalues T1 - C1 distribution delta 5')
dev.off()
pdf('pvalues-35S-Treatment1-Control2-comparison_delta5.pdf',width=6,height=4,paper='special')
hist(Pv1[2:2,], breaks = 30, main = 'pvalues T1 - C2 distribution delta 5')
dev.off()
pdf('pvalues-35S-Treatment2-Control1-comparison_delta5.pdf',width=6,height=4,paper='special')
hist(Pv1[3:3,], breaks = 30, main = 'pvalues T2 - C1 distribution delta 5')
dev.off()
pdf('pvalues-35S-Treatment2-Control2-comparison_delta5.pdf',width=6,height=4,paper='special')
hist(Pv1[4:4,], breaks = 30, main = 'pvalues T2 - C2 distribution delta 5')
dev.off()
pdf('pvalues-35S-Treatment1-Control1-comparison_erb1.pdf',width=6,height=4,paper='special')
hist(Pv2[1:1,], breaks = 30, main = 'pvalues T1 - C1 distribution erb1')
dev.off()
pdf('pvalues-35S-Treatment1-Control2-comparison_erb1.pdf',width=6,height=4,paper='special')
hist(Pv2[2:2,], breaks = 30, main = 'pvalues T1 - C2 distribution erb1')
dev.off()
pdf('pvalues-35S-Treatment2-Control1-comparison_erb1.pdf',width=6,height=4,paper='special')
hist(Pv2[3:3,], breaks = 30, main = 'pvalues T2 - C1 distribution erb1')
dev.off()
pdf('pvalues-xist-Treatment2-Control2-comparison_erb1.pdf',width=6,height=4,paper='special')
hist(Pv2[4:4,], breaks = 30, main = 'pvalues T2 - C2 distribution erb1')
dev.off()
setwd('./../../..')
getwd()
pdf('pvalues-35S-Treatment2-Control2-comparison_erb1.pdf',width=6,height=4,paper='special')
hist(Pv2[4:4,], breaks = 30, main = 'pvalues T2 - C2 distribution erb1')
dev.off()
setwd('pvalues_plots/35S/new_plots/')
pdf('pvalues-35S-Treatment1-Control1-comparison_delta5.pdf',width=6,height=4,paper='special')
hist(Pv1[1:1,], breaks = 30, main = 'pvalues T1 - C1 distribution delta 5')
dev.off()
pdf('pvalues-35S-Treatment1-Control2-comparison_delta5.pdf',width=6,height=4,paper='special')
hist(Pv1[2:2,], breaks = 30, main = 'pvalues T1 - C2 distribution delta 5')
dev.off()
pdf('pvalues-35S-Treatment2-Control1-comparison_delta5.pdf',width=6,height=4,paper='special')
hist(Pv1[3:3,], breaks = 30, main = 'pvalues T2 - C1 distribution delta 5')
dev.off()
pdf('pvalues-35S-Treatment2-Control2-comparison_delta5.pdf',width=6,height=4,paper='special')
hist(Pv1[4:4,], breaks = 30, main = 'pvalues T2 - C2 distribution delta 5')
dev.off()
pdf('pvalues-35S-Treatment1-Control1-comparison_erb1.pdf',width=6,height=4,paper='special')
hist(Pv2[1:1,], breaks = 30, main = 'pvalues T1 - C1 distribution erb1')
dev.off()
pdf('pvalues-35S-Treatment1-Control2-comparison_erb1.pdf',width=6,height=4,paper='special')
hist(Pv2[2:2,], breaks = 30, main = 'pvalues T1 - C2 distribution erb1')
dev.off()
pdf('pvalues-35S-Treatment2-Control1-comparison_erb1.pdf',width=6,height=4,paper='special')
hist(Pv2[3:3,], breaks = 30, main = 'pvalues T2 - C1 distribution erb1')
dev.off()
pdf('pvalues-35S-Treatment2-Control2-comparison_erb1.pdf',width=6,height=4,paper='special')
hist(Pv2[4:4,], breaks = 30, main = 'pvalues T2 - C2 distribution erb1')
dev.off()
setwd('./../../..')
#The selected empirical p values are input into the HMM, to give posterior probabilities
posteriors_diff <- hmmFwbw_differential_two_betas(pvaluesstretch)
colnames(posteriors_diff) <- c("UU","UM","MU","MM")
head(posteriors_diff)
shifted_posteriors <- matrix(, nrow=dim(posteriors_diff)[1], ncol=4)
shifted_posteriors[1:(length(shifted_posteriors[,1]) - 1), ] <- posteriors_diff[2:(length(shifted_posteriors[,1])), ]
colnames(shifted_posteriors) <- c("UU","UM","MU","MM")
head(shifted_posteriors)
#Plotting and outputting the shifted posterior probabilities of differential modification
differentiallymod <- shifted_posteriors[,2] + shifted_posteriors[,3]
setwd("Analysis/diffBUM-HMM")
getwd()
pdf("35S_sum_of_diff_states_diff_BUM_HMM.pdf", width = 10)
plot(differentiallymod, xlab = 'Nucleotide position',
ylab = 'Probability of modification (UM+MU)',
main = 'diffBUMHMM output: Probability of differential modification between delta5 and erb1',
ylim = c(0,1))
dev.off()
#Outputting all posterior probabilities
shifted_posteriors <- replace(shifted_posteriors,is.na(shifted_posteriors),-999)
write.table(shifted_posteriors,sep="\t",quote=FALSE,file=outputfilename,col.names = c("UU","UM","MU","MM"), row.names = TRUE)
