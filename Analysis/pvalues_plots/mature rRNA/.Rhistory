head(logdropoffsmut18S$LDR_C)
head(logdropoffsmut18S$LDR_CT)
head(logdropoffswt25S$LDR_C)
head(logdropoffswt18S$LDR_CT)
head(logdropoffsmut5.8S$LDR_C)
head(logdropoffsmut5S$LDR_CT)
Nc <- Nt <- noreplicates
strand = "+"
# 25S
empPvals_25S_A <- computePvals(logdropoffswt25S$LDR_C,logdropoffswt25S$LDR_CT, Nc, Nt, strand, logdropoffswt25S$nuclPosition,
logdropoffswt25S$nuclSelection$analysedC, logdropoffswt25S$nuclSelection$analysedCT)
#overlapping the stretches of nucleotides that have valid log mutation rates to get a representative set
stretches_25S <-overlapsRanges(logdropoffswt25S$stretches,logdropoffsmut25S$stretches)
## Number of nucleotides in the sequence = number of rows in empPvals_1
nNucl <- length(empPvals_25S_A[1, ])
View(stretches_25S)
stretches_25S
nNucl
# 18S
empPvals_18S_A <- computePvals(logdropoffswt18S$LDR_C,logdropoffswt18S$LDR_CT, Nc, Nt, strand, logdropoffswt18S$nuclPosition,
logdropoffswt18S$nuclSelection$analysedC, logdropoffswt18S$nuclSelection$analysedCT)
empPvals_18S_B <- computePvals(logdropoffsmut18S$LDR_C,logdropoffsmut18S$LDR_CT, Nc, Nt, strand, logdropoffsmut18S$nuclPosition,
logdropoffsmut18S$nuclSelection$analysedC, logdropoffsmut18S$nuclSelection$analysedCT)
stretches_18S <-overlapsRanges(logdropoffswt18S$stretches,logdropoffsmut18S$stretches)
nNucl <- length(empPvals_18S_A[1, ])
View(stretches_18S)
stretches_18S
# 5.8S
empPvals_5.8S_A <- computePvals(logdropoffswt5.8S$LDR_C,logdropoffswt5.8S$LDR_CT, Nc, Nt, strand, logdropoffswt5.8S$nuclPosition,
logdropoffswt5.8S$nuclSelection$analysedC, logdropoffswt5.8S$nuclSelection$analysedCT)
empPvals_5.8S_B <- computePvals(logdropoffsmut5.8S$LDR_C,logdropoffsmut5.8S$LDR_CT, Nc, Nt, strand, logdropoffsmut5.8S$nuclPosition,
logdropoffsmut5.8S$nuclSelection$analysedC, logdropoffsmut5.8S$nuclSelection$analysedCT)
stretches_5.8S <-overlapsRanges(logdropoffswt5.8S$stretches,logdropoffsmut5.8S$stretches)
nNucl <- length(empPvals_5.8S_A[1, ])
# 5S
empPvals_5S_A <- computePvals(logdropoffswt5S$LDR_C,logdropoffswt5S$LDR_CT, Nc, Nt, strand, logdropoffswt5S$nuclPosition,
logdropoffswt5S$nuclSelection$analysedC, logdropoffswt5S$nuclSelection$analysedCT)
empPvals_5S_B <- computePvals(logdropoffsmut5S$LDR_C,logdropoffsmut5S$LDR_CT, Nc, Nt, strand, logdropoffsmut5S$nuclPosition,
logdropoffsmut5S$nuclSelection$analysedC, logdropoffsmut5S$nuclSelection$analysedCT)
stretches_5S <-overlapsRanges(logdropoffswt5S$stretches,logdropoffsmut5S$stretches)
nNucl <- length(empPvals_5S_A[1, ])
stretches_5.8S
stretches_5S
View(mergedstartswt5S)
View(empPvals_5S_B)
# 25S
empPvals_25S_A <- computePvals(logdropoffswt25S$LDR_C,logdropoffswt25S$LDR_CT, Nc, Nt, strand, logdropoffswt25S$nuclPosition,
logdropoffswt25S$nuclSelection$analysedC, logdropoffswt25S$nuclSelection$analysedCT)
empPvals_25S_B <- computePvals(logdropoffsmut25S$LDR_C,logdropoffsmut25S$LDR_CT, Nc, Nt, strand, logdropoffsmut25S$nuclPosition,
logdropoffsmut25S$nuclSelection$analysedC, logdropoffsmut25S$nuclSelection$analysedCT)
#overlapping the stretches of nucleotides that have valid log mutation rates to get a representative set
stretches_25S <-overlapsRanges(logdropoffswt25S$stretches,logdropoffsmut25S$stretches)
## Number of nucleotides in the sequence = number of rows in empPvals_1
nNucl_25S <- length(empPvals_25S_A[1, ])
# 18S
empPvals_18S_A <- computePvals(logdropoffswt18S$LDR_C,logdropoffswt18S$LDR_CT, Nc, Nt, strand, logdropoffswt18S$nuclPosition,
logdropoffswt18S$nuclSelection$analysedC, logdropoffswt18S$nuclSelection$analysedCT)
empPvals_18S_B <- computePvals(logdropoffsmut18S$LDR_C,logdropoffsmut18S$LDR_CT, Nc, Nt, strand, logdropoffsmut18S$nuclPosition,
logdropoffsmut18S$nuclSelection$analysedC, logdropoffsmut18S$nuclSelection$analysedCT)
stretches_18S <-overlapsRanges(logdropoffswt18S$stretches,logdropoffsmut18S$stretches)
nNucl_18S <- length(empPvals_18S_A[1, ])
# 5.8S
empPvals_5.8S_A <- computePvals(logdropoffswt5.8S$LDR_C,logdropoffswt5.8S$LDR_CT, Nc, Nt, strand, logdropoffswt5.8S$nuclPosition,
logdropoffswt5.8S$nuclSelection$analysedC, logdropoffswt5.8S$nuclSelection$analysedCT)
empPvals_5.8S_B <- computePvals(logdropoffsmut5.8S$LDR_C,logdropoffsmut5.8S$LDR_CT, Nc, Nt, strand, logdropoffsmut5.8S$nuclPosition,
logdropoffsmut5.8S$nuclSelection$analysedC, logdropoffsmut5.8S$nuclSelection$analysedCT)
stretches_5.8S <-overlapsRanges(logdropoffswt5.8S$stretches,logdropoffsmut5.8S$stretches)
nNucl_5.8S <- length(empPvals_5.8S_A[1, ])
# 5S
empPvals_5S_A <- computePvals(logdropoffswt5S$LDR_C,logdropoffswt5S$LDR_CT, Nc, Nt, strand, logdropoffswt5S$nuclPosition,
logdropoffswt5S$nuclSelection$analysedC, logdropoffswt5S$nuclSelection$analysedCT)
empPvals_5S_B <- computePvals(logdropoffsmut5S$LDR_C,logdropoffsmut5S$LDR_CT, Nc, Nt, strand, logdropoffsmut5S$nuclPosition,
logdropoffsmut5S$nuclSelection$analysedC, logdropoffsmut5S$nuclSelection$analysedCT)
stretches_5S <-overlapsRanges(logdropoffswt5S$stretches,logdropoffsmut5S$stretches)
nNucl_5S <- length(empPvals_5S_A[1, ])
remove(nNucl)
##Before computing posterior probabilities, we set up matrices to hold the required p-values
selectPvalues <- function(empPvals_1, empPvals_2, stretches){
Pv1 <- matrix(ncol = 1,nrow = length(empPvals_1[,1]))
Pv2 <- matrix(ncol = 1,nrow = length(empPvals_2[,1]))
pvaluesstretch <-list(Pv1, Pv2)
for (i in 1:length(stretches)) {
if (i>1 & i<length(stretches)) {
## Extract start and end of a current stretch from the stretches object
## This condition is executed only for IRanges objects in stretches that are not the first or last
stretchStart <- start(stretches)[i]
stretchEnd <- end(stretches)[i]
## This loop checks stretches to see which positions meets the threshold for analysis, and extracts the corresponding pvalues from empPvals.
## The positions that are excluded from analysis (not in stretches) are given empty cells
Pv1 <-cbind(Pv1, matrix(nrow = length(empPvals_1[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv2 <-cbind(Pv2, matrix(nrow = length(empPvals_2[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv1 <- cbind(Pv1,empPvals_1[,stretchStart:stretchEnd])
Pv2 <- cbind(Pv2,empPvals_2[,stretchStart:stretchEnd])
pvaluesstretch <-list(Pv1, Pv2)
next()
} else if (i==1) {
## Extract start and end of a current stretch from the stretches object
## This condition is only executed for the first IRanges object in stretches
stretchStart <- start(stretches)[i]
stretchEnd <- end(stretches)[i]
## This condition assesses if the first object in stretches is the first nucleotide in the RNA molecule. If not, empty columns are added to the
## beginning of the Pv1 and 2 matrix.This ensures that the indexing of the output posteriors match the exact positions on the RNA molecule!
if (stretchStart != 1) {
Pv1 <- matrix(nrow = length(empPvals_1[,1]), ncol = (stretchStart-1))
Pv2 <- matrix(nrow = length(empPvals_2[,1]), ncol = (stretchStart-1))
Pv1 <- cbind(Pv1, empPvals_1[,stretchStart:stretchEnd])
Pv2 <- cbind(Pv2, empPvals_2[,stretchStart:stretchEnd])
} else if(stretchStart == 1) {
Pv1 <- empPvals_1[,stretchStart:stretchEnd]
Pv2 <- empPvals_2[,stretchStart:stretchEnd]
}
pvaluesstretch <- list(Pv1,Pv2)
next()
} else if (i == length(stretches)) {
## Extract start and end of a current stretch from the stretches object
## This condition is only executed for the last IRanges objects in stretches
stretchStart <- start(stretches)[i]
stretchEnd <- end(stretches)[i]
##In the end we add empty coulumns to the end of the Pv1 and 2 matrix as needed to match the actual length of the RNA molecule.
Pv1 <-cbind(Pv1, matrix(nrow = length(empPvals_1[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv2 <-cbind(Pv2, matrix(nrow = length(empPvals_2[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv1 <- cbind(Pv1,empPvals_1[,stretchStart:stretchEnd], matrix(nrow = length(empPvals_1[,1]), ncol = (length(empPvals_1[1,])-stretchEnd)))
Pv2 <- cbind(Pv2,empPvals_2[,stretchStart:stretchEnd], matrix(nrow = length(empPvals_2[,1]), ncol = (length(empPvals_2[1,])-stretchEnd)))
pvaluesstretch <- list(Pv1,Pv2)
}
}
}
pvaluesstretch_25S <- selectPvalues(empPvals_25S_A, empPvals_25S_B, stretches_25S)
posteriors_diff_25S <- hmmFwbw_differential_two_betas(pvaluesstretch_25S)
##Before computing posterior probabilities, we set up matrices to hold the required p-values
selectPvalues <- function(empPvals_1, empPvals_2, stretches){
Pv1 <- matrix(ncol = 1,nrow = length(empPvals_1[,1]))
Pv2 <- matrix(ncol = 1,nrow = length(empPvals_2[,1]))
pvaluesstretch <-list(Pv1, Pv2)
for (i in 1:length(stretches)) {
if (i>1 & i<length(stretches)) {
## Extract start and end of a current stretch from the stretches object
## This condition is executed only for IRanges objects in stretches that are not the first or last
stretchStart <- start(stretches)[i]
stretchEnd <- end(stretches)[i]
## This loop checks stretches to see which positions meets the threshold for analysis, and extracts the corresponding pvalues from empPvals.
## The positions that are excluded from analysis (not in stretches) are given empty cells
Pv1 <-cbind(Pv1, matrix(nrow = length(empPvals_1[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv2 <-cbind(Pv2, matrix(nrow = length(empPvals_2[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv1 <- cbind(Pv1,empPvals_1[,stretchStart:stretchEnd])
Pv2 <- cbind(Pv2,empPvals_2[,stretchStart:stretchEnd])
pvaluesstretch <-list(Pv1, Pv2)
next()
} else if (i==1) {
## Extract start and end of a current stretch from the stretches object
## This condition is only executed for the first IRanges object in stretches
stretchStart <- start(stretches)[i]
stretchEnd <- end(stretches)[i]
## This condition assesses if the first object in stretches is the first nucleotide in the RNA molecule. If not, empty columns are added to the
## beginning of the Pv1 and 2 matrix.This ensures that the indexing of the output posteriors match the exact positions on the RNA molecule!
if (stretchStart != 1) {
Pv1 <- matrix(nrow = length(empPvals_1[,1]), ncol = (stretchStart-1))
Pv2 <- matrix(nrow = length(empPvals_2[,1]), ncol = (stretchStart-1))
Pv1 <- cbind(Pv1, empPvals_1[,stretchStart:stretchEnd])
Pv2 <- cbind(Pv2, empPvals_2[,stretchStart:stretchEnd])
} else if(stretchStart == 1) {
Pv1 <- empPvals_1[,stretchStart:stretchEnd]
Pv2 <- empPvals_2[,stretchStart:stretchEnd]
}
pvaluesstretch <- list(Pv1,Pv2)
next()
} else if (i == length(stretches)) {
## Extract start and end of a current stretch from the stretches object
## This condition is only executed for the last IRanges objects in stretches
stretchStart <- start(stretches)[i]
stretchEnd <- end(stretches)[i]
##In the end we add empty coulumns to the end of the Pv1 and 2 matrix as needed to match the actual length of the RNA molecule.
Pv1 <-cbind(Pv1, matrix(nrow = length(empPvals_1[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv2 <-cbind(Pv2, matrix(nrow = length(empPvals_2[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv1 <- cbind(Pv1,empPvals_1[,stretchStart:stretchEnd], matrix(nrow = length(empPvals_1[,1]), ncol = (length(empPvals_1[1,])-stretchEnd)))
Pv2 <- cbind(Pv2,empPvals_2[,stretchStart:stretchEnd], matrix(nrow = length(empPvals_2[,1]), ncol = (length(empPvals_2[1,])-stretchEnd)))
pvaluesstretch <- list(Pv1,Pv2)
}
return(pvaluesstretch)
}
}
pvaluesstretch_25S <- selectPvalues(empPvals_25S_A, empPvals_25S_B, stretches_25S)
##Before computing posterior probabilities, we set up matrices to hold the required p-values
selectPvalues <- function(empPvals_1, empPvals_2, stretches){
Pv1 <- matrix(ncol = 1,nrow = length(empPvals_1[,1]))
Pv2 <- matrix(ncol = 1,nrow = length(empPvals_2[,1]))
pvaluesstretch <-list(Pv1, Pv2)
for (i in 1:length(stretches)) {
if (i>1 & i<length(stretches)) {
## Extract start and end of a current stretch from the stretches object
## This condition is executed only for IRanges objects in stretches that are not the first or last
stretchStart <- start(stretches)[i]
stretchEnd <- end(stretches)[i]
## This loop checks stretches to see which positions meets the threshold for analysis, and extracts the corresponding pvalues from empPvals.
## The positions that are excluded from analysis (not in stretches) are given empty cells
Pv1 <-cbind(Pv1, matrix(nrow = length(empPvals_1[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv2 <-cbind(Pv2, matrix(nrow = length(empPvals_2[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv1 <- cbind(Pv1,empPvals_1[,stretchStart:stretchEnd])
Pv2 <- cbind(Pv2,empPvals_2[,stretchStart:stretchEnd])
pvaluesstretch <-list(Pv1, Pv2)
next()
} else if (i==1) {
## Extract start and end of a current stretch from the stretches object
## This condition is only executed for the first IRanges object in stretches
stretchStart <- start(stretches)[i]
stretchEnd <- end(stretches)[i]
## This condition assesses if the first object in stretches is the first nucleotide in the RNA molecule. If not, empty columns are added to the
## beginning of the Pv1 and 2 matrix.This ensures that the indexing of the output posteriors match the exact positions on the RNA molecule!
if (stretchStart != 1) {
Pv1 <- matrix(nrow = length(empPvals_1[,1]), ncol = (stretchStart-1))
Pv2 <- matrix(nrow = length(empPvals_2[,1]), ncol = (stretchStart-1))
Pv1 <- cbind(Pv1, empPvals_1[,stretchStart:stretchEnd])
Pv2 <- cbind(Pv2, empPvals_2[,stretchStart:stretchEnd])
} else if(stretchStart == 1) {
Pv1 <- empPvals_1[,stretchStart:stretchEnd]
Pv2 <- empPvals_2[,stretchStart:stretchEnd]
}
pvaluesstretch <- list(Pv1,Pv2)
next()
} else if (i == length(stretches)) {
## Extract start and end of a current stretch from the stretches object
## This condition is only executed for the last IRanges objects in stretches
stretchStart <- start(stretches)[i]
stretchEnd <- end(stretches)[i]
##In the end we add empty coulumns to the end of the Pv1 and 2 matrix as needed to match the actual length of the RNA molecule.
Pv1 <-cbind(Pv1, matrix(nrow = length(empPvals_1[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv2 <-cbind(Pv2, matrix(nrow = length(empPvals_2[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv1 <- cbind(Pv1,empPvals_1[,stretchStart:stretchEnd], matrix(nrow = length(empPvals_1[,1]), ncol = (length(empPvals_1[1,])-stretchEnd)))
Pv2 <- cbind(Pv2,empPvals_2[,stretchStart:stretchEnd], matrix(nrow = length(empPvals_2[,1]), ncol = (length(empPvals_2[1,])-stretchEnd)))
pvaluesstretch <- list(Pv1,Pv2)
return(pvaluesstretch)
}
}
}
pvaluesstretch_25S <- selectPvalues(empPvals_25S_A, empPvals_25S_B, stretches_25S)
##Before computing posterior probabilities, we set up matrices to hold the required p-values
selectPvalues <- function(empPvals_1, empPvals_2, stretches){
Pv1 <- matrix(ncol = 1,nrow = length(empPvals_1[,1]))
Pv2 <- matrix(ncol = 1,nrow = length(empPvals_2[,1]))
pvaluesstretch <-list(Pv1, Pv2)
for (i in 1:length(stretches)) {
if (i>1 & i<length(stretches)) {
## Extract start and end of a current stretch from the stretches object
## This condition is executed only for IRanges objects in stretches that are not the first or last
stretchStart <- start(stretches)[i]
stretchEnd <- end(stretches)[i]
## This loop checks stretches to see which positions meets the threshold for analysis, and extracts the corresponding pvalues from empPvals.
## The positions that are excluded from analysis (not in stretches) are given empty cells
Pv1 <-cbind(Pv1, matrix(nrow = length(empPvals_1[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv2 <-cbind(Pv2, matrix(nrow = length(empPvals_2[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv1 <- cbind(Pv1,empPvals_1[,stretchStart:stretchEnd])
Pv2 <- cbind(Pv2,empPvals_2[,stretchStart:stretchEnd])
pvaluesstretch <-list(Pv1, Pv2)
next()
} else if (i==1) {
## Extract start and end of a current stretch from the stretches object
## This condition is only executed for the first IRanges object in stretches
stretchStart <- start(stretches)[i]
stretchEnd <- end(stretches)[i]
## This condition assesses if the first object in stretches is the first nucleotide in the RNA molecule. If not, empty columns are added to the
## beginning of the Pv1 and 2 matrix.This ensures that the indexing of the output posteriors match the exact positions on the RNA molecule!
if (stretchStart != 1) {
Pv1 <- matrix(nrow = length(empPvals_1[,1]), ncol = (stretchStart-1))
Pv2 <- matrix(nrow = length(empPvals_2[,1]), ncol = (stretchStart-1))
Pv1 <- cbind(Pv1, empPvals_1[,stretchStart:stretchEnd])
Pv2 <- cbind(Pv2, empPvals_2[,stretchStart:stretchEnd])
} else if(stretchStart == 1) {
Pv1 <- empPvals_1[,stretchStart:stretchEnd]
Pv2 <- empPvals_2[,stretchStart:stretchEnd]
}
pvaluesstretch <- list(Pv1,Pv2)
next()
} else if (i == length(stretches)) {
## Extract start and end of a current stretch from the stretches object
## This condition is only executed for the last IRanges objects in stretches
stretchStart <- start(stretches)[i]
stretchEnd <- end(stretches)[i]
##In the end we add empty coulumns to the end of the Pv1 and 2 matrix as needed to match the actual length of the RNA molecule.
Pv1 <-cbind(Pv1, matrix(nrow = length(empPvals_1[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv2 <-cbind(Pv2, matrix(nrow = length(empPvals_2[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv1 <- cbind(Pv1,empPvals_1[,stretchStart:stretchEnd], matrix(nrow = length(empPvals_1[,1]), ncol = (length(empPvals_1[1,])-stretchEnd)))
Pv2 <- cbind(Pv2,empPvals_2[,stretchStart:stretchEnd], matrix(nrow = length(empPvals_2[,1]), ncol = (length(empPvals_2[1,])-stretchEnd)))
pvaluesstretch <- list(Pv1,Pv2)
}
}
return(pvaluesstretch)
}
pvaluesstretch_25S <- selectPvalues(empPvals_25S_A, empPvals_25S_B, stretches_25S)
View(pvaluesstretch_25S)
posteriors_diff_25S <- hmmFwbw_differential_two_betas(pvaluesstretch_25S)
View(posteriors_diff_25S)
View(empPvals_25S_A)
posteriors_diff_25S
pvaluesstretch_18S <- selectPvalues(empPvals_18S_A, empPvals_18S_B, stretches_18S)
pvaluesstretch_5.8S <- selectPvalues(empPvals_5.8S_A, empPvals_5.8S_B, stretches_5.8S)
pvaluesstretch_5S <- selectPvalues(empPvals_5S_A, empPvals_5S_B, stretches_5S)
View(pvaluesstretch_5S)
View(pvaluesstretch_5.8S)
View(pvaluesstretch_25S)
View(pvaluesstretch_18S)
posteriors_diff_18S <- hmmFwbw_differential_two_betas(pvaluesstretch_18S)
posteriors_diff_5.8S <- hmmFwbw_differential_two_betas(pvaluesstretch_5.8S)
posteriors_diff_5S <- hmmFwbw_differential_two_betas(pvaluesstretch_5S)
View(posteriors_diff_18S)
View(posteriors_diff_5.8S)
View(posteriors_diff_5S)
shifted_posteriors_25S <- matrix(, nrow=dim(posteriors_diff_25S)[1], ncol=4)
shifted_posteriors_25S[1:(length(shifted_posteriors_25S[,1]) - 1), ] <- posteriors_diff_25S[2:(length(shifted_posteriors_25S[,1])), ]
colnames(shifted_posteriors_25S) <- c("UU","UM","MU","MM")
shifted_posteriors_25S
head(posteriors_diff_25S)
head(shifted_posteriors_25S)
#The selected empirical p values are input into the HMM, to give posterior probabilities
posteriors_diff_25S <- hmmFwbw_differential_two_betas(pvaluesstretch_25S)
colnames(posteriors_diff_25S) <- c("UU","UM","MU","MM")
head(posteriors_diff_25S)
shifted_posteriors_25S <- matrix(, nrow=dim(posteriors_diff_25S)[1], ncol=4)
shifted_posteriors_25S[1:(length(shifted_posteriors_25S[,1]) - 1), ] <- posteriors_diff_25S[2:(length(shifted_posteriors_25S[,1])), ]
colnames(shifted_posteriors_25S) <- c("UU","UM","MU","MM")
head(shifted_posteriors_25S)
head(posteriors_diff_25S)
shifted_posteriors_18S <- matrix(, nrow=dim(posteriors_diff_18S)[1], ncol=4)
shifted_posteriors_18S[1:(length(shifted_posteriors_18S[,1]) - 1), ] <- posteriors_diff_18S[2:(length(shifted_posteriors_18S[,1])), ]
colnames(shifted_posteriors_18S) <- c("UU","UM","MU","MM")
shifted_posteriors_18S <- matrix(, nrow=dim(posteriors_diff_18S)[1], ncol=4)
shifted_posteriors_18S[1:(length(shifted_posteriors_18S[,1]) - 1), ] <- posteriors_diff_18S[2:(length(shifted_posteriors_18S[,1])), ]
colnames(shifted_posteriors_18S) <- c("UU","UM","MU","MM")
shifted_posteriors_5.8S <- matrix(, nrow=dim(posteriors_diff_5.8S)[1], ncol=4)
shifted_posteriors_5.8S[1:(length(shifted_posteriors_5.8S[,1]) - 1), ] <- posteriors_diff_5.8S[2:(length(shifted_posteriors_5.8S[,1])), ]
colnames(shifted_posteriors_5.8S) <- c("UU","UM","MU","MM")
shifted_posteriors_5S <- matrix(, nrow=dim(posteriors_diff_5S)[1], ncol=4)
shifted_posteriors_5S[1:(length(shifted_posteriors_5S[,1]) - 1), ] <- posteriors_diff_5S[2:(length(shifted_posteriors_5S[,1])), ]
colnames(shifted_posteriors_5S) <- c("UU","UM","MU","MM")
head(posteriors_diff_18S)
#Plotting and outputting the shifted posterior probabilities of differential modification
differentiallymod_25S <- shifted_posteriors_25S[,2] + shifted_posteriors_25S[,3]
head(shifted_posteriors_18S)
head(posteriors_diff_5.8S)
#Plotting and outputting the shifted posterior probabilities of differential modification
differentiallymod_25S <- shifted_posteriors_25S[,2] + shifted_posteriors_25S[,3]
head(shifted_posteriors_5.8S)
head(shifted_posteriors_5S)
head(posteriors_diff_5S)
differentiallymod_25S <- shifted_posteriors_25S[,2] + shifted_posteriors_25S[,3]
differentiallymod_18S <- shifted_posteriors_18S[,2] + shifted_posteriors_18S[,3]
differentiallymod_5.8S <- shifted_posteriors_5.8S[,2] + shifted_posteriors_5.8S[,3]
differentiallymod_5S <- shifted_posteriors_5S[,2] + shifted_posteriors_5S[,3]
setwd("Analysis/diffBUM-HMM")
# 25S
pdf('rRNA_25S_sum_of_diff_states_diff_BUM_HMM.pdf', width = 10)
plot(differentiallymod25S, xlab = 'Nucleotide position',
ylab = 'Probability of differential modification',
main = 'Mature yeast rRNA dataset: Probabilites of differential modification - 25S',
ylim = c(0,1))
dev.off()
# 18S
pdf('rRNA_18S_sum_of_diff_states_diff_BUM_HMM.pdf', width = 10)
plot(differentiallymod18S, xlab = 'Nucleotide position',
ylab = 'Probability of differential modification',
main = 'Mature yeast rRNA dataset: Probabilites of differential modification - 18S',
ylim = c(0,1))
dev.off()
# 5.8S
pdf('rRNA_5.8S_sum_of_diff_states_diff_BUM_HMM.pdf', width = 10)
plot(differentiallymod5.8S, xlab = 'Nucleotide position',
ylab = 'Probability of differential modification',
main = 'Mature yeast rRNA dataset: Probabilites of differential modification - 5.8S',
ylim = c(0,1))
dev.off()
# 5S
pdf('rRNA_5S_sum_of_diff_states_diff_BUM_HMM.pdf', width = 10)
plot(differentiallymod5S, xlab = 'Nucleotide position',
ylab = 'Probability of differential modification',
main = 'Mature yeast rRNA dataset: Probabilites of differential modification - 5S',
ylim = c(0,1))
dev.off()
#Outputting all posterior probabilities
shifted_posteriors_25S <- replace(shifted_posteriors_25S,is.na(shifted_posteriors_25S),-999)
shifted_posteriors_18S <- replace(shifted_posteriors_18S,is.na(shifted_posteriors_25S),-999)
shifted_posteriors_5.8S <- replace(shifted_posteriors_5.8S,is.na(shifted_posteriors_25S),-999)
shifted_posteriors_5S <- replace(shifted_posteriors_5S,is.na(shifted_posteriors_25S),-999)
write.table(shifted_posteriors_25S,sep="\t",quote=FALSE,file="25S_negative_control_test_identical_conditions_diff_BUM_HMM_analyse.txt",col.names = c("UU","UM","MU","MM"), row.names = TRUE)
write.table(shifted_posteriors_18S,sep="\t",quote=FALSE,file="18S_negative_control_test_identical_conditions_diff_BUM_HMM_analyse.txt",col.names = c("UU","UM","MU","MM"), row.names = TRUE)
write.table(shifted_posteriors_5.8S,sep="\t",quote=FALSE,file="5.8S_negative_control_test_identical_conditions_diff_BUM_HMM_analyse.txt",col.names = c("UU","UM","MU","MM"), row.names = TRUE)
write.table(shifted_posteriors_5S,sep="\t",quote=FALSE,file="5S_negative_control_test_identical_conditions_diff_BUM_HMM_analyse.txt",col.names = c("UU","UM","MU","MM"), row.names = TRUE)
pdf('rRNA_25S_sum_of_diff_states_diff_BUM_HMM.pdf', width = 10)
plot(differentiallymod_25S, xlab = 'Nucleotide position',
ylab = 'Probability of differential modification',
main = 'Mature yeast rRNA dataset: Probabilites of differential modification - 25S',
ylim = c(0,1))
dev.off()
# 18S
pdf('rRNA_18S_sum_of_diff_states_diff_BUM_HMM.pdf', width = 10)
plot(differentiallymod_18S, xlab = 'Nucleotide position',
ylab = 'Probability of differential modification',
main = 'Mature yeast rRNA dataset: Probabilites of differential modification - 18S',
ylim = c(0,1))
dev.off()
# 5.8S
pdf('rRNA_5.8S_sum_of_diff_states_diff_BUM_HMM.pdf', width = 10)
plot(differentiallymod_5.8S, xlab = 'Nucleotide position',
ylab = 'Probability of differential modification',
main = 'Mature yeast rRNA dataset: Probabilites of differential modification - 5.8S',
ylim = c(0,1))
dev.off()
# 5S
pdf('rRNA_5S_sum_of_diff_states_diff_BUM_HMM.pdf', width = 10)
plot(differentiallymod_5S, xlab = 'Nucleotide position',
ylab = 'Probability of differential modification',
main = 'Mature yeast rRNA dataset: Probabilites of differential modification - 5S',
ylim = c(0,1))
dev.off()
#Outputting all posterior probabilities
shifted_posteriors_25S <- replace(shifted_posteriors_25S,is.na(shifted_posteriors_25S),-999)
shifted_posteriors_18S <- replace(shifted_posteriors_18S,is.na(shifted_posteriors_25S),-999)
shifted_posteriors_5.8S <- replace(shifted_posteriors_5.8S,is.na(shifted_posteriors_25S),-999)
shifted_posteriors_5S <- replace(shifted_posteriors_5S,is.na(shifted_posteriors_25S),-999)
write.table(shifted_posteriors_25S,sep="\t",quote=FALSE,file="25S_negative_control_test_identical_conditions_diff_BUM_HMM_analyse.txt",col.names = c("UU","UM","MU","MM"), row.names = TRUE)
write.table(shifted_posteriors_18S,sep="\t",quote=FALSE,file="18S_negative_control_test_identical_conditions_diff_BUM_HMM_analyse.txt",col.names = c("UU","UM","MU","MM"), row.names = TRUE)
write.table(shifted_posteriors_5.8S,sep="\t",quote=FALSE,file="5.8S_negative_control_test_identical_conditions_diff_BUM_HMM_analyse.txt",col.names = c("UU","UM","MU","MM"), row.names = TRUE)
#Outputting all posterior probabilities
shifted_posteriors_25S <- replace(shifted_posteriors_25S,is.na(shifted_posteriors_25S),-999)
shifted_posteriors_18S <- replace(shifted_posteriors_18S,is.na(shifted_posteriors_18S),-999)
shifted_posteriors_5.8S <- replace(shifted_posteriors_5.8S,is.na(shifted_posteriors_5.8S),-999)
shifted_posteriors_5S <- replace(shifted_posteriors_5S,is.na(shifted_posteriors_5S),-999)
write.table(shifted_posteriors_25S,sep="\t",quote=FALSE,file="25S_negative_control_test_identical_conditions_diff_BUM_HMM_analyse.txt",col.names = c("UU","UM","MU","MM"), row.names = TRUE)
write.table(shifted_posteriors_18S,sep="\t",quote=FALSE,file="18S_negative_control_test_identical_conditions_diff_BUM_HMM_analyse.txt",col.names = c("UU","UM","MU","MM"), row.names = TRUE)
colnames(posteriors_diff_18S) <- c("UU","UM","MU","MM")
colnames(posteriors_diff_5.8S) <- c("UU","UM","MU","MM")
colnames(posteriors_diff_5S) <- c("UU","UM","MU","MM")
shifted_posteriors_25S <- matrix(, nrow=dim(posteriors_diff_25S)[1], ncol=4)
shifted_posteriors_25S[1:(length(shifted_posteriors_25S[,1]) - 1), ] <- posteriors_diff_25S[2:(length(shifted_posteriors_25S[,1])), ]
colnames(shifted_posteriors_25S) <- c("UU","UM","MU","MM")
shifted_posteriors_18S <- matrix(, nrow=dim(posteriors_diff_18S)[1], ncol=4)
shifted_posteriors_18S[1:(length(shifted_posteriors_18S[,1]) - 1), ] <- posteriors_diff_18S[2:(length(shifted_posteriors_18S[,1])), ]
colnames(shifted_posteriors_18S) <- c("UU","UM","MU","MM")
shifted_posteriors_5.8S <- matrix(, nrow=dim(posteriors_diff_5.8S)[1], ncol=4)
shifted_posteriors_5.8S[1:(length(shifted_posteriors_5.8S[,1]) - 1), ] <- posteriors_diff_5.8S[2:(length(shifted_posteriors_5.8S[,1])), ]
colnames(shifted_posteriors_5.8S) <- c("UU","UM","MU","MM")
shifted_posteriors_5S <- matrix(, nrow=dim(posteriors_diff_5S)[1], ncol=4)
shifted_posteriors_5S[1:(length(shifted_posteriors_5S[,1]) - 1), ] <- posteriors_diff_5S[2:(length(shifted_posteriors_5S[,1])), ]
colnames(shifted_posteriors_5S) <- c("UU","UM","MU","MM")
head(posteriors_diff_25S)
head(shifted_posteriors_25S)
#Plotting and outputting the shifted posterior probabilities of differential modification
differentiallymod_25S <- shifted_posteriors_25S[,2] + shifted_posteriors_25S[,3]
differentiallymod_18S <- shifted_posteriors_18S[,2] + shifted_posteriors_18S[,3]
differentiallymod_5.8S <- shifted_posteriors_5.8S[,2] + shifted_posteriors_5.8S[,3]
differentiallymod_5S <- shifted_posteriors_5S[,2] + shifted_posteriors_5S[,3]
setwd("Analysis/diffBUM-HMM")
# 25S
pdf('rRNA_25S_sum_of_diff_states_diff_BUM_HMM.pdf', width = 10)
plot(differentiallymod_25S, xlab = 'Nucleotide position',
ylab = 'Probability of differential modification',
main = 'Mature yeast rRNA dataset: Probabilites of differential modification - 25S',
ylim = c(0,1))
dev.off()
# 18S
pdf('rRNA_18S_sum_of_diff_states_diff_BUM_HMM.pdf', width = 10)
plot(differentiallymod_18S, xlab = 'Nucleotide position',
ylab = 'Probability of differential modification',
main = 'Mature yeast rRNA dataset: Probabilites of differential modification - 18S',
ylim = c(0,1))
dev.off()
# 5.8S
pdf('rRNA_5.8S_sum_of_diff_states_diff_BUM_HMM.pdf', width = 10)
plot(differentiallymod_5.8S, xlab = 'Nucleotide position',
ylab = 'Probability of differential modification',
main = 'Mature yeast rRNA dataset: Probabilites of differential modification - 5.8S',
ylim = c(0,1))
dev.off()
# 5S
pdf('rRNA_5S_sum_of_diff_states_diff_BUM_HMM.pdf', width = 10)
plot(differentiallymod_5S, xlab = 'Nucleotide position',
ylab = 'Probability of differential modification',
main = 'Mature yeast rRNA dataset: Probabilites of differential modification - 5S',
ylim = c(0,1))
dev.off()
#Outputting all posterior probabilities
shifted_posteriors_25S <- replace(shifted_posteriors_25S,is.na(shifted_posteriors_25S),-999)
shifted_posteriors_18S <- replace(shifted_posteriors_18S,is.na(shifted_posteriors_18S),-999)
shifted_posteriors_5.8S <- replace(shifted_posteriors_5.8S,is.na(shifted_posteriors_5.8S),-999)
shifted_posteriors_5S <- replace(shifted_posteriors_5S,is.na(shifted_posteriors_5S),-999)
write.table(shifted_posteriors_25S,sep="\t",quote=FALSE,file="25S_negative_control_test_identical_conditions_diff_BUM_HMM_analyse.txt",col.names = c("UU","UM","MU","MM"), row.names = TRUE)
write.table(shifted_posteriors_18S,sep="\t",quote=FALSE,file="18S_negative_control_test_identical_conditions_diff_BUM_HMM_analyse.txt",col.names = c("UU","UM","MU","MM"), row.names = TRUE)
write.table(shifted_posteriors_5.8S,sep="\t",quote=FALSE,file="5.8S_negative_control_test_identical_conditions_diff_BUM_HMM_analyse.txt",col.names = c("UU","UM","MU","MM"), row.names = TRUE)
write.table(shifted_posteriors_5S,sep="\t",quote=FALSE,file="5S_negative_control_test_identical_conditions_diff_BUM_HMM_analyse.txt",col.names = c("UU","UM","MU","MM"), row.names = TRUE)
write.table(shifted_posteriors_25S,sep="\t",quote=FALSE,file="25S_negative_control_test_identical_conditions_diff_BUM_HMM_analysed_NEW.txt",col.names = c("UU","UM","MU","MM"), row.names = TRUE)
write.table(shifted_posteriors_18S,sep="\t",quote=FALSE,file="18S_negative_control_test_identical_conditions_diff_BUM_HMM_analysed_NEW.txt",col.names = c("UU","UM","MU","MM"), row.names = TRUE)
write.table(shifted_posteriors_5.8S,sep="\t",quote=FALSE,file="5.8S_negative_control_test_identical_conditions_diff_BUM_HMM_analysed_NEW.txt",col.names = c("UU","UM","MU","MM"), row.names = TRUE)
write.table(shifted_posteriors_5S,sep="\t",quote=FALSE,file="5S_negative_control_test_identical_conditions_diff_BUM_HMM_analysed_NEW.txt",col.names = c("UU","UM","MU","MM"), row.names = TRUE)
write.table(pvaluesstretch_25S, file="pvalues_25S.txt", row.names=TRUE, col.names=TRUE)
setwd("..")
getwd()
setwd("pvalues_plots/mature rRNA/")
t(pvaluesstretch_25S[[1]])
write.table(t(pvaluesstretch_25S[[1]]), file="pvalues_25S.txt", row.names=TRUE, col.names=TRUE)
write.table(t(pvaluesstretch_18S[[1]]), file="pvalues_18S.txt", row.names=TRUE, col.names=TRUE)
write.table(t(pvaluesstretch_5.8S[[1]]), file="pvalues_5.8S.txt", row.names=TRUE, col.names=TRUE)
write.table(t(pvaluesstretch_5S[[1]]), file="pvalues_5S.txt", row.names=TRUE, col.names=TRUE)
pdf('pvalues-maturerRNA-25S.pdf',width=6,height=4,paper='special')
hist(pvaluesstretch_25S[[1]], breaks = 30, main = 'pvalues T1 - C1 distribution in vivo')
dev.off()
pdf('pvalues-maturerRNA-18S.pdf',width=6,height=4,paper='special')
hist(pvaluesstretch_18S[[1]], breaks = 30, main = 'mature rRNA dataset − 18S p−value distribution')
dev.off()
pdf('pvalues-maturerRNA-5.8S.pdf',width=6,height=4,paper='special')
hist(pvaluesstretch_5.8S[[1]], breaks = 30, main = 'mature rRNA dataset − 5.8S p−value distribution')
dev.off()
pdf('pvalues-maturerRNA-5S.pdf',width=6,height=4,paper='special')
hist(pvaluesstretch_5S[[1]], breaks = 30, main = 'mature rRNA dataset − 5S p−value distribution')
dev.off()
