,Colv=NA)
B = matrix(c(1, 0, 0, 0,1, 0, 0, 0,0, 0, 1, 0,0, 0, 1, 0,0, 0, 1, 0,0, 1, 0, 0, 0, 0, 1, 0,),ncol=4, byrow = TRUE)
B = matrix(c(1, 0, 0, 0,1, 0, 0, 0,0, 0, 1, 0,0, 0, 1, 0,0, 0, 1, 0,0, 1, 0, 0, 0, 0, 1, 0),ncol=4, byrow = TRUE)
heatmap(B
,scale = 'none'
,col=heat.colors(10)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
B = matrix(c(1, 0, 0, 0,1, 0, 0, 0,0, 0, 1, 0,0, 0, 1, 0,0, 0, 1, 0,0, 0, 1, 0, 0, 1, 0, 0),ncol=4, byrow = TRUE)
heatmap(B
,scale = 'none'
,col=heat.colors(10)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
print(t(posterior))
A=t(posterior)
heatmap(A,
,scale = 'none'
,col=heat.colors(10)
,main="Synthetic Data"
,Rowv=NA
,Colv=NA)
heatmap(A[1:7,],
,scale = 'none'
,col=heat.colors(10)
,main="Modelled Data"
,Rowv=NA
,Colv=NA)
source('C:/Users/maran/Desktop/paolo-bumhmm/code_v17052018/code_v17052018/synth_bummhmm_diff.R')
posterior[1:5,]
posterior[1:4,]
posterior[1:4,1:4]
heatmap(posterior[1:4,1:10]
,scale = 'column'
,col=heat.colors(256)
,main='Treatment_Coverage'
,Rowv=NA
,Colv=NA)
heatmap(posterior[1:4,1:10]
,scale = 'column'
,col=heat.colors(10)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
posterior[1:4,1:10]
posterior[1:10,1:4]
t(posterior)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(10)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(256)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior[1:10,]
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(20)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(15)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
heatmap(posterior[1:4,1:10]
,scale = 'column'
,col=heat.colors(256)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
posterior[1:4,1:10]
heatmap(posterior[1:4,1:10]
,scale = 'none'
,col=heat.colors(256)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
heatmap(posterior[1:4,1:10]
,scale = 'column'
,col=heat.colors(256)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(15)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'column'
,col=heat.colors(10)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'none'
,col=heat.colors(10)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
?heatmap
transpose_posterior= t(posterior)
heatmap(transpose_posterior[1:10,]
,scale = 'row'
,col=heat.colors(10)
,main='Posterior_Probability'
,Rowv=NA
,Colv=NA)
transpose_posterior= t(posterior)
View(transpose_posterior)
trans <- matrix(c(0.95, 0.2, 0.05, 0.8), nrow=2, ncol=2)
t(trans)
getwd()
print(correct_prop)
print(correct_prop)
#_________________SYNTHETIC CODE GENERATION________________________________________
library(BUMHMM)
### Generate synthetic data
alpha = 1
beta = 10
E = 2 # Number of experimental comparisons
trans <- matrix(c(0.95, 0.2, 0.05, 0.8), nrow = 2, ncol = 2)
trans <- t(trans)
curr_state = 1
N = 10000
Pvals = matrix(0, nrow = E, ncol = N)
all_states = c()
for (i in 1:N) {
if (curr_state ==1){curr_state = rbinom(1, 1, trans[, curr_state]) + 1}
else if (curr_state == 2){if (rbinom(1, 1, trans[, curr_state]) == 0) {curr_state = 2} else {curr_state =1}}
all_states[i] = curr_state
for (e in 1:E) {
if (curr_state == 1) {
Pvals[e,i] = runif(1)
} else if (curr_state == 2) {
Pvals[e,i] = rbeta(1, alpha, beta)
}
}
}
# Obtain generated p-values and latent states
p <- t(Pvals)
### Run BUMHMM on the generated p-valus
out <- BUMHMM:::hmmFwbw(Pvals, trans, c(0.5, 0.5), alpha, beta)
out <- t(out)
# Check if the predicted states match the latent (true) states
labels <- apply(X = out, MARGIN = 1, FUN = function(x) which(x == max(x, na.rm = TRUE)))
correct_prop <- length(which(all_states == labels)) / N
print(correct_prop)
ls
x= c(1,2,3)
x
class(x)
x = c(0,1,2,3,4,5,6,7,8,9)
0:100
x1= 0:100
y = 3+2*x1
plot(x1, y)
seq{0,10, by=0.5}
seq(0,10, by=0.5)
seq(0,10, length=31)
legend(’topright’, lty=c(3,2), col=c(’red’, ’blue’), lwd=2,
legend=c(’pop mean’, ’sample mean’), cex=0.8) #adds the legend
legend(’topright’, lty=c(3,2), col=c(’red’, ’blue’), lwd=2,
legend=c(’pop mean’, ’sample mean’), cex=0.8) #adds the legend
### Draws and plots a sample from the standard normal distribution
n = 50 # sample size
x = rnorm(n, 0, 1) #draws the sample
x.bar = mean(x) #sample mean
br = seq(min(x), max(x), length=13) #sets breaks for the histogram
hist(x, col=’wheat’, breaks=br) # makes the histogram
abline(v=0, lty=3, col=’red’, lwd=2) # adds population line
abline(v=x.bar, lty=2, col=’blue’, lwd=2) # adds sample line
legend(’topright’, lty=c(3,2), col=c(’red’, ’blue’), lwd=2,legend=c(’pop mean’, ’sample mean’), cex=0.8) #adds the legend
### Draws and plots a sample from the standard normal distribution
n = 50 # sample size
x = rnorm(n, 0, 1) #draws the sample
x.bar = mean(x) #sample mean
br = seq(min(x), max(x), length=13) #sets breaks for the histogram
hist(x, col=’wheat’, breaks=br) # makes the histogram
abline(v=0, lty=3, col=’red’, lwd=2) # adds population line
abline(v=x.bar, lty=2, col=’blue’, lwd=2) # adds sample line
legend(’topright’, lty=c(3,2), col=c(’red’, ’blue’), lwd=2, legend=c(’pop mean’, ’sample mean’), cex=0.8) #adds the l
qnorm(97.5)
qnorm(0.975)
library(parallel)
detectCores()
(cl=makeCluster(detectCores()))
library(parallel)
detectCores()
(cl=makeCluster(detectCores()))
library(parallel)
detectCores()
(cl=makeCluster(detectCores()))
(parLapply( cl, coreList, function(x) paste("pid "Sys.getpid(), " run on core", x)))
( parLapply( cl, coreList, function(x) paste("pid "sys.getpid(), " run on core", x)))
proc.time()[1:5]
system.time(Sys.sleep(1))
system.time(Sys.sleep(1))[1:5]
trans <- matrix(c(0.8, 0.1, 0.1, 0.1,
0.05, 0.6, 0.15, 0.05,
0.05, 0.15, 0.6, 0.05,
0.1, 0.15, 0.15, 0.8), nrow = 4, ncol = 4, byrow = TRUE)
trans
####Maximisation of log-likelihood for Poisson ditribution
set.seed(600) # set a random seed for reproducibility of results
data <- rpois(n=150,20)
poisson_loglikelihood <- function(lambda,x)
{
n <-length(x) # n is the sample size
llik <- -n*lambda+sum(x*log(lambda))-sum(log(factorial(x)))
return(llik)
}
maximisation <- optimize(poisson_loglikelihood,
interval=c(1,50),x=data,maximum=TRUE)
maximisation
####Maximisation of log-likelihood for Poisson ditribution
set.seed(600) # set a random seed for reproducibility of results
data <- rpois(n=150,20)
poisson_loglikelihood <- function(lambda,x)
{
n <-length(x) # n is the sample size
llik <- -n*lambda+sum(x*log(lambda))-sum(log(factorial(x)))
return(llik)
}
maximisation <- optimize(poisson_loglikelihood,
interval=c(1,50),x=data,maximum=TRUE)
>maximisation
####Maximisation of log-likelihood for Poisson ditribution
set.seed(600) # set a random seed for reproducibility of results
data <- rpois(n=150,20)
poisson_loglikelihood <- function(lambda,x)
{
n <-length(x) # n is the sample size
llik <- -n*lambda+sum(x*log(lambda))-sum(log(factorial(x)))
return(llik)
}
maximisation <- optimize(poisson_loglikelihood,
interval=c(1,50),x=data,maximum=TRUE)
maximisation
#The following code draws 5000 samples of size 150 from a Poisson(20) and each time time stores the MLE to the vector mle.
set.seed(400) # set a random seed for reproducibility of results
mle <- NULL
for (i in 1:5000){
x <- rpois(n=150,20) # draw a sample of size 150 from Poisson(l=20)
mle[i] <- mean(x) # This only works because the MLE for a poisson is the mean. MLE might not be equivalent to the mean for different for other distributions
}
m <- mean(mle)
v <- var(mle)
c(m,v)
hist(mle,xlab=expression(hat(lambda)),freq=FALSE)
abline(v=m,col=2, lty=2,lwd=2)
# Add the line of a normal curve with mean=20, sigma=0.134
z <- seq(18,22,length=1000)
lines(z,dnorm(z, 20, sqrt(0.134)),col=4)
c(quantile(mle,0.025), quantile(mle,0.975))
abline(v=quantile(mle,0.975),col=2,lty=2,lwd=2)
abline(v=quantile(mle,0.025),col=2,lty=2,lwd=2)
nrows = 320
ncols = 11000
set.seed(1)
in_data = rnorm(nrows*ncols)
nCores = detectCores()
library(parallel)
nCores = detectCores()
?cor
git branch
ls
ls
ls
source("https://bioconductor.org/biocLite.R")
setwd("C:/Users/maran/Desktop/diff_BUM_HMM")
#USER HAS TO ALWAYS MANUALLY SET THE WORKING DIRECTOR TO THE CLONED DIFFBUM-HMM FOLDER
#ON RSTUDIO BEFORE RUNNIGN THE SCRIPT
working_directory <- getwd()
library(Rmpfr)
#IF YOU HAVEN'T DONE IT YET, READ THE FOLLOWING FILE AND FOLLOW ITS INSTRUCTIONS:
# Bioconductor_March2020_InstallationBug_Fixed.txt
#Line 11 is commented out because after done what it says on line 5
#(i.e. updating R and Bioconductor to versions 3.6.3 and 3.1.0, respectively)
#there is no need to run line 8 every time the script is run.
#source("https://bioconductor.org/biocLite.R")
source("Functions/computePvals.R")
source("Functions/calculateLDRs.R")
source("Functions/hmmFwbw_differential_two_betas.R")
source("Functions/betaParamsEM.R")
source("Functions/betaParamsMStep.R")
source("Functions/findPatternPos.R")
source("Functions/nuclPerm.R")
source("Functions/scaleDOR.R")
source("Functions/selectNuclPos.R")
source("Functions/computeStretches.R")
source("Functions/stabiliseVariance.R")
suppressPackageStartupMessages({
library(Biostrings)
library(SummarizedExperiment) })
#getwd()
noreplicates <- 2
#cat(working_directory)
#ref_seq_directory <- paste(working_directory, "Reference sequences/Xist.seq",molecule  ,sep="/")
refsequence <- "Xist.seq"
#cat(refsequence)
outputfilename <-paste0('Xist in vivo vs. ex vivo scaled by dc','_diff_BUM_HMM_analysis','.txt')
table1_incell <- read.delim("Data/XIST_1M7_in-cell_rep1.txt", stringsAsFactors=FALSE, col.names= c("chromosome","position","in_cell_DMSO1_read_count","in_cell_DMSO1_mutation_rate","in_cell_1M71_read_count","in_cell_1M71_mutation_rate"))
table2_incell <- read.delim("Data/XIST_1M7_in-cell_rep2.txt", stringsAsFactors=FALSE, col.names= c("chromosome","position","in_cell_DMSO2_read_count","in_cell_DMSO2_mutation_rate","in_cell_1M72_read_count","in_cell_1M72_mutation_rate"))
table1_exvivo <- read.delim("Data/XIST_1M7_ex-vivo_rep1.txt", stringsAsFactors=FALSE, col.names= c("chromosome","position","ex_vivo_DMSO1_read_count","ex_vivo_DMSO1_mutation_rate","ex_vivo_1M71_read_count","ex_vivo_1M71_mutation_rate"))
table2_exvivo <- read.delim("Data/XIST_1M7_ex-vivo_rep2.txt", stringsAsFactors=FALSE, col.names= c("chromosome","position","ex_vivo_DMSO2_read_count","ex_vivo_DMSO2_mutation_rate","ex_vivo_1M72_read_count","ex_vivo_1M72_mutation_rate"))
head(table1_incell["in_cell_DMSO1_read_count"])
dc_incell <- read.delim("Xist_1M7_in-cell_wDC.txt", stringsAsFactors=FALSE, col.names= c("chromosome","position","in_cell_DMSO1_read_count","in_cell_DMSO1_mutation_rate","in_cell_1M71_read_count","in_cell_1M71_mutation_rate","DC_read_count" ,"DC_mutation_rate"))
dc_exvivo <- read.delim("XIST_1M7_ex-vivo_wDC.txt", stringsAsFactors=FALSE, col.names= c("chromosome","position","ex_vivo_DMSO1_read_count","ex_vivo_DMSO1_mutation_rate","ex_vivo_1M71_read_count","ex_vivo_1M71_mutation_rate","DC_read_count" ,"DC_mutation_rate"))
#READ COUNTS  i.e COVERAGE
incell_counts <- data.frame("in_cell_DMSO1_read_count" = table1_incell["in_cell_DMSO1_read_count"],"in_cell_DMSO2_read_count" = table2_incell["in_cell_DMSO2_read_count"],"X1M7_1_read_count" = table1_incell["in_cell_1M71_read_count"],"X1M7_2_read_count"= table2_incell["in_cell_1M72_read_count"])
exvivo_counts <- data.frame("ex_vivo_DMSO1_read_count" = table1_exvivo["ex_vivo_DMSO1_read_count"],"ex_vivo_DMSO2_read_count" = table2_exvivo["ex_vivo_DMSO2_read_count"],"X1M7_1_read_count" = table1_exvivo["ex_vivo_1M71_read_count"],"X1M7_2_read_count"= table2_exvivo["ex_vivo_1M72_read_count"])
head(incell_counts)
head(exvivo_counts)
#MUTATION RATES
incell_rates <- data.frame("in_cell_DMSO1_mutation_rate" = table1_incell["in_cell_DMSO1_mutation_rate"],"in_cell_DMSO2_mutation_rate" = table2_incell["in_cell_DMSO2_mutation_rate"],"X1M7_1_mutation_rate" = table1_incell["in_cell_1M71_mutation_rate"],"X1M7_2_mutation_rate"= table2_incell["in_cell_1M72_mutation_rate"])
exvivo_rates <- data.frame("ex_vivo_DMSO1_mutation_rate" = table1_exvivo["ex_vivo_DMSO1_mutation_rate"],"ex_vivo_DMSO2_mutation_rate" = table2_exvivo["ex_vivo_DMSO2_mutation_rate"],"X1M7_1_mutation_rate" = table1_exvivo["ex_vivo_1M71_mutation_rate"],"X1M7_2_mutation_rate"= table2_exvivo["ex_vivo_1M72_mutation_rate"])
# DENATURED COTNROLS
dc_incell_column <- data.frame("DC_mutation_rate"=dc_incell["DC_mutation_rate"] )
dc_exvivo_column <- data.frame("DC_mutation_rate"=dc_exvivo["DC_mutation_rate"])
#$in_cell_DMSO1_mutation_rate <- mpfr(incell_rates$in_cell_DMSO1_mutation_rate, 200)
#incell_rates$in_cell_DMSO2_mutation_rate <- mpfr(incell_rates$in_cell_DMSO2_mutation_rate, 200)
#incell_rates$in_cell_1M71_mutation_rate <- mpfr(incell_rates$in_cell_1M71_mutation_rate, 200)
#incell_rates$in_cell_1M72_mutation_rate <- mpfr(incell_rates$in_cell_1M72_mutation_rate, 200)
library(formattable)
incell_rates = formattable(incell_rates,digits = 8, format = "f" )
exvivo_rates = formattable(exvivo_rates,digits = 8, format = "f" )
dc_incell_column = formattable(dc_incell_column, digits = 8, format = "f" )
dc_exvivo_column = formattable(dc_exvivo_column,digits = 8, format = "f" )
#incell_rates_vector <- as.vector(incell_rates[['in_cell_DMSO1_mutation_rate']])
#y = formatC(incell_rates_vector, digits = 8, format = "f")
#y = formattable(incell_rates_vector,digits = 8, format = "f" )
#dc_incell_column_vector <- as.vector(dc_incell_column[['DC_mutation_rate']])
#w = formattable(dc_incell_column_vector,digits = 8, format = "f" )
#
#a = y/w
#form_a = formattable(a,digits = 8, format = "f" )
#z <- mpfr(incell_rates_vector, precBits = 10)
#dc_incell_column$DC_mutation_rate <- mpfr(dc_incell_column$DC_mutation_rate,200)
#dc_exvivo_column$DC_mutation_rate <- mpfr(dc_exvivo_column$DC_mutation_rate,200)
#Dividing DMSO and 1MT columns for both in cell and ex vivo by respective DC replicate
#Note:only 1 single replicate for DC was available, for each condition.
scaled_incell_rates <- incell_rates[,] / dc_incell_column
scaled_exvivo_rates <- exvivo_rates[,] / dc_exvivo_column
#Removing NaN and Inf values
is.na(scaled_incell_rates)<-sapply(scaled_incell_rates, is.infinite)
scaled_incell_rates[is.na(scaled_incell_rates)]<-0
is.na(scaled_exvivo_rates)<-sapply(scaled_exvivo_rates, is.infinite)
scaled_exvivo_rates[is.na(scaled_exvivo_rates)]<-0
#scaled_incell_rates[,] <- sapply(scaled_incell_rates[,], as.numeric)
#scaled_exvivo_rates[,] <- sapply(scaled_exvivo_rates[,], as.numeric)
#WORKING
attributes(scaled_incell_rates) <- NULL
attributes(scaled_exvivo_rates) <- NULL
#df <-data.frame(t(sapply(scaled_incell_rates,c)))
#df_2 <-data.frame(t(sapply(scaled_exvivo_rates,c)))
n <- length(scaled_incell_rates[[1]])
scaled_incell_rates_df  <- structure(scaled_incell_rates,  row.names = c(NA, -n), class = "data.frame")
colnames(scaled_incell_rates_df) <- c("in_cell_DMSO1_mutation_rate", "in_cell_DMSO2_mutation_rate", "in_cell_1M71_mutation_rate", "in_cell_1M72_mutation_rate" )
scaled_exvivo_rates_df  <- structure(scaled_exvivo_rates,  row.names = c(NA, -n), class = "data.frame")
colnames(scaled_exvivo_rates_df) <- c("in_cell_DMSO1_mutation_rate", "in_cell_DMSO2_mutation_rate", "in_cell_1M71_mutation_rate", "in_cell_1M72_mutation_rate" )
#Setting regions to 0, based on sanity check
scaled_incell_rates_df[2500:4500,]=0
scaled_exvivo_rates_df[2500:4500,]=0
scaled_incell_rates_df[1:78,]=0
scaled_exvivo_rates_df[1:78,]=0
scaled_incell_rates_df[2451:2599,]=0
scaled_exvivo_rates_df[2451:2599,]=0
scaled_incell_rates_df[17801:17918,]=0
scaled_exvivo_rates_df[17801:17918,]=0
#scaled_exvivo_rates_df  <- structure(scaled_exvivo_rates, col.names = c("ex_vivo_DMSO1_mutation_rate", "ex_vivo_DMSO2_mutation_rate", "ex_vivo_1M71_mutation_rate", "ex_vivo_1M72_mutation_rate" ), row.names = c(NA, -n), class = "data.frame")
#scaled_incell_rates_df <- data.frame(matrix(unlist(scaled_incell_rates), byrow=FALSE, ncol=length(scaled_incell_rates[[1]])),stringsAsFactors=FALSE)
#scaled_incell_rates_df <- data.frame(matrix(unlist(scaled_exvivo_rates)),stringsAsFactors=FALSE)
#Option 1: Leave mutation counts untouched, using non-scaled rated
#mutation_counts_in_cell <-  incell_counts * incell_rates
#mutation_counts_ex_vivo <-  exvivo_counts * exvivo_rates
#Option 2: calculate counts using scaled rates
mutation_counts_in_cell <-  incell_counts * scaled_incell_rates_df
mutation_counts_ex_vivo <-  exvivo_counts * scaled_exvivo_rates_df
mutation_counts_in_cell <- cbind(position=0,mutation_counts_in_cell)
mutation_counts_ex_vivo <- cbind(position=0,mutation_counts_ex_vivo)
mutation_counts_in_cell <- cbind(gene="Xist",mutation_counts_in_cell)
mutation_counts_ex_vivo <- cbind(gene="Xist",mutation_counts_ex_vivo)
incell_counts <- cbind(position=0,incell_counts)
exvivo_counts <- cbind(position=0,exvivo_counts)
incell_counts <- cbind(gene="Xist",incell_counts)
exvivo_counts <- cbind(gene="Xist",exvivo_counts)
head(mutation_counts_ex_vivo)
head(exvivo_counts)
## Calculating dropoff rates
logdropoffs_incell <- calculateLDRs(incell_counts,mutation_counts_in_cell, noreplicates, refsequence)
logdropoffs_exvivo <- calculateLDRs(exvivo_counts,mutation_counts_ex_vivo, noreplicates, refsequence)
hist(logdropoffs_incell$LDR_C, breaks = 30, main = 'Null distribution of LDRs')
hist(logdropoffs_exvivo$LDR_C, breaks = 30, main = 'Null distribution of LDRs')
## ------------------------------------------------------------------------
###check if the matrices of p-values can be called after the pipeline has been run twice
#head(logdropoffswt$LDR_C)
#head(logdropoffswt$LDR_CT)
#head(logdropoffsmut$LDR_C)
#head(logdropoffsmut$LDR_CT)
Nc <- Nt <- noreplicates
strand = "+"
#logdropoffswt <- logdropoffs_incell
#logdropoffsmut <- logdropoffs_exvivo
###
empPvals_1 <- computePvals(logdropoffs_incell$LDR_C,logdropoffs_incell$LDR_CT, Nc, Nt, strand, logdropoffs_incell$nuclPosition,
logdropoffs_incell$nuclSelection$analysedC, logdropoffs_incell$nuclSelection$analysedCT)
empPvals_2 <- computePvals(logdropoffs_exvivo$LDR_C,logdropoffs_exvivo$LDR_CT, Nc, Nt, strand, logdropoffs_exvivo$nuclPosition,
logdropoffs_exvivo$nuclSelection$analysedC, logdropoffs_exvivo$nuclSelection$analysedCT)
stretches <-overlapsRanges(logdropoffs_incell$stretches,logdropoffs_exvivo$stretches)
## Number of nucleotides in the sequence = number of rows in empPvals_1
nNucl <- length(empPvals_1[1, ])
## ------------------------------------------------------------------------
###computes posterior probabilities of all nucleotides in the stretch specified above.
#This is the step where the null distributions and p-values are calculated as well.
#The most important arguments are the LDRs, the positions used to compute the
#null distribution, as well as the positional information of the selected stretches
#and nucleotide pairs where the LDRs were obtained.
###There are two alternatives, unhash as needed:
###Alternative 1: Calculate posteriors on the data at positions specified by stretches only:
Pv1 <- matrix(ncol = 1,nrow = length(empPvals_1[,1]))
Pv2 <- matrix(ncol = 1,nrow = length(empPvals_2[,1]))
pvaluesstretch<-list(Pv1, Pv2)
for (i in 1:length(stretches)) {
if (i>1 & i<=length(stretches)) {
## Extract start and end of a current stretch
stretchStart <- start(stretches)[i]
stretchEnd <- end(stretches)[i]
Pv1 <-cbind(Pv1, matrix(nrow = length(empPvals_1[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv2 <-cbind(Pv2, matrix(nrow = length(empPvals_2[,1]), ncol = (stretchStart - end(stretches[i-1])-1)))
Pv1 <- cbind(Pv1,empPvals_1[,stretchStart:stretchEnd])
Pv2 <- cbind(Pv2,empPvals_2[,stretchStart:stretchEnd])
pvaluesstretch <-list(Pv1, Pv2)
next()
} else {
## Extract start and end of a current stretch
stretchStart <- start(stretches)[i]
stretchEnd <- end(stretches)[i]
Pv1 <- cbind(Pv1,empPvals_1[,stretchStart:stretchEnd])
Pv2 <- cbind(Pv2,empPvals_2[,stretchStart:stretchEnd])
pvaluesstretch <- list(Pv1,Pv2)
next()
}
return(pvaluesstretch)
}
##TEST if pvaluesstretch contains p-values
#pvaluesstretch [[1]][,100:200]
posteriors_diff <- hmmFwbw_differential_two_betas(pvaluesstretch)
#colnames(posteriors_diff) <- c("  ","UU","UM","MU","MM") - The way Toby had this line
colnames(posteriors_diff) <- c("UU","UM","MU","MM")
head(posteriors_diff)
#save this for trying to implement stretches
#for (i in 1:length(stretches)) {
## Extract start and end of a current stretch
#stretchStart <- start(stretches)[i]
#stretchEnd <- end(stretches)[i]
#stretchpvalues <- list(empPvals_1[, stretchStart:stretchEnd],empPvals_2[, stretchStart:stretchEnd])
#if (strand == '+') {
#selection <- hmmFwbw_differential_two_betas(stretchpvalues)
#posteriors_diff[stretchStart:stretchEnd, ] <- t(selection)
#}
#}
### Alternative 2 - Calculating posteriors on all the data without considering stretches:
#posteriors_diff <- hmmFwbw_differential_two_betas(list(empPvals_1,empPvals_2))
#colnames(posteriors_diff) <- c(" ","UU","UM","MU","MM")
#head(posteriors_diff)
## ------------------------------------------------------------------------
#head(posteriors)
## All posterior probabilities need to be shifted by 1 nt because the RT
## is believed to stop 1 nucleotide before the modified nucleodide.
## So below a new matrix is made containing the values shifted by one position.
## ------------------------------------------------------------------------
shifted_posteriors <- matrix(, nrow=dim(posteriors_diff)[1], ncol=4)
shifted_posteriors[1:(length(shifted_posteriors[,1]) - 1), ] <- posteriors_diff[2:(length(shifted_posteriors[,1])), ]
colnames(shifted_posteriors) <- c("UU","UM","MU","MM")
head(shifted_posteriors)
head(posteriors_diff)
posteriors_diff
differentiallymod <- shifted_posteriors[,2] + shifted_posteriors[,3]
## ------------------------------------------------------------------------
png("Xist_sum_of_diff_states_diff_BUM_HMM_scaled_w_dc.png")
plot(differentiallymod, xlab = 'Nucleotide position',
ylab = 'Probability of modification (UM+MU)',
main = 'diffBUMHMM output: ProbabilITY of differential modification between in vivo and ex vivo',
ylim = c(0,1))
dev.off()
## ----eval=FALSE----------------------------------------------------------
## ## Call the function with the additonal tolerance parameter
## posteriors <- computeProbs(LDR_C, LDR_CT, Nc, Nt, '+', nuclPosition,
##                            nuclSelection$analysedC, nuclSelection$analysedCT,
##                            stretches, 0.001)
## ------------------------------------------------------------------------
shifted_posteriors <- replace(shifted_posteriors,is.na(shifted_posteriors),-999)
write.table(shifted_posteriors,sep="\t",quote=FALSE,file=outputfilename,col.names = c("UU","UM","MU","MM"), row.names = TRUE)
